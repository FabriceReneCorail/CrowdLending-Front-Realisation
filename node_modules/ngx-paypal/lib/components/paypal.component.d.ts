import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { IPayPalConfig } from '../models/paypal-models';
import { PayPalScriptService } from '../services/paypal-script.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {
    private paypalScriptService;
    private cdr;
    private ngZone;
    /**
     * Configuration for paypal.
     */
    config?: IPayPalConfig;
    /**
     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page
     * sharing base configuration. In such a case only a single component may register script.
     */
    registerScript: boolean;
    /**
     * Emitted when paypal script is loaded
     */
    scriptLoaded: EventEmitter<any>;
    /**
     * Id of the element where PayPal button will be rendered
     */
    payPalButtonContainerId?: string;
    private readonly ngUnsubscribe;
    private payPalButtonContainerElem?;
    set payPalButtonContainer(content: ElementRef);
    /**
     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
     */
    private initializePayPal;
    /**
     * Reference to PayPal global API
     */
    private payPal;
    constructor(paypalScriptService: PayPalScriptService, cdr: ChangeDetectorRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    customInit(payPal: any): void;
    reinitialize(config: IPayPalConfig | undefined): void;
    private doPayPalCheck;
    private initPayPalScript;
    private generateElementId;
    private initPayPal;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPaypalComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPaypalComponent, "ngx-paypal", never, { "registerScript": "registerScript"; "config": "config"; }, { "scriptLoaded": "scriptLoaded"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5cGFsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwYXlwYWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElQYXlQYWxDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvcGF5cGFsLW1vZGVscyc7XHJcbmltcG9ydCB7IFBheVBhbFNjcmlwdFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wYXlwYWwtc2NyaXB0LnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQYXlwYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBwcml2YXRlIHBheXBhbFNjcmlwdFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGNkcjtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciBwYXlwYWwuXHJcbiAgICAgKi9cclxuICAgIGNvbmZpZz86IElQYXlQYWxDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIElmIGVuYWJsZWQsIHBheXBhbCBTREsgc2NyaXB0IHdpbGwgYmUgbG9hZGVkLiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gaGF2ZSBtdWx0aXBsZSBQYXlQYWwgY29tcG9uZW50cyBvbiB0aGUgc2FtZSBwYWdlXHJcbiAgICAgKiBzaGFyaW5nIGJhc2UgY29uZmlndXJhdGlvbi4gSW4gc3VjaCBhIGNhc2Ugb25seSBhIHNpbmdsZSBjb21wb25lbnQgbWF5IHJlZ2lzdGVyIHNjcmlwdC5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJTY3JpcHQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEVtaXR0ZWQgd2hlbiBwYXlwYWwgc2NyaXB0IGlzIGxvYWRlZFxyXG4gICAgICovXHJcbiAgICBzY3JpcHRMb2FkZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZCBvZiB0aGUgZWxlbWVudCB3aGVyZSBQYXlQYWwgYnV0dG9uIHdpbGwgYmUgcmVuZGVyZWRcclxuICAgICAqL1xyXG4gICAgcGF5UGFsQnV0dG9uQ29udGFpbmVySWQ/OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5nVW5zdWJzY3JpYmU7XHJcbiAgICBwcml2YXRlIHBheVBhbEJ1dHRvbkNvbnRhaW5lckVsZW0/O1xyXG4gICAgc2V0IHBheVBhbEJ1dHRvbkNvbnRhaW5lcihjb250ZW50OiBFbGVtZW50UmVmKTtcclxuICAgIC8qKlxyXG4gICAgICogRmxhZyB0aGF0IGluZGljYXRlcyBpZiBwYXlwYWwgc2hvdWxkIGJlIGluaXRpYWxpemVkIChyZXF1aXJlZCBmb3IgaGFuZGxpbmcgc2NyaXB0IGxvYWQgZXZlbnRzIGFuZCBhdmFpbGFiaWxpdHkgb2YgRE9NIGVsZW1lbnQpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZVBheVBhbDtcclxuICAgIC8qKlxyXG4gICAgICogUmVmZXJlbmNlIHRvIFBheVBhbCBnbG9iYWwgQVBJXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcGF5UGFsO1xyXG4gICAgY29uc3RydWN0b3IocGF5cGFsU2NyaXB0U2VydmljZTogUGF5UGFsU2NyaXB0U2VydmljZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgbmdab25lOiBOZ1pvbmUpO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBjdXN0b21Jbml0KHBheVBhbDogYW55KTogdm9pZDtcclxuICAgIHJlaW5pdGlhbGl6ZShjb25maWc6IElQYXlQYWxDb25maWcgfCB1bmRlZmluZWQpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBkb1BheVBhbENoZWNrO1xyXG4gICAgcHJpdmF0ZSBpbml0UGF5UGFsU2NyaXB0O1xyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUVsZW1lbnRJZDtcclxuICAgIHByaXZhdGUgaW5pdFBheVBhbDtcclxufVxyXG4iXX0=