import { CalendarMode } from '../common/types/calendar-mode';
import { IDatePickerDirectiveConfig } from './date-picker-directive-config.model';
import { DatePickerDirectiveService } from './date-picker-directive.service';
import { IDpDayPickerApi } from './date-picker.api';
import { DatePickerComponent } from './date-picker.component';
import { ComponentFactoryResolver, ElementRef, EventEmitter, OnInit, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { CalendarValue, ISelectionEvent, SingleCalendarValue } from '..';
import { INavEvent } from '../common/models/navigation-event.model';
import { UtilsService } from '../common/services/utils/utils.service';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerDirective implements OnInit {
    viewContainerRef: ViewContainerRef;
    elemRef: ElementRef;
    componentFactoryResolver: ComponentFactoryResolver;
    service: DatePickerDirectiveService;
    formControl: NgControl;
    utilsService: UtilsService;
    get config(): IDatePickerDirectiveConfig;
    set config(config: IDatePickerDirectiveConfig);
    get attachTo(): ElementRef | string;
    set attachTo(attachTo: ElementRef | string);
    get theme(): string;
    set theme(theme: string);
    get mode(): CalendarMode;
    set mode(mode: CalendarMode);
    get minDate(): SingleCalendarValue;
    set minDate(minDate: SingleCalendarValue);
    get maxDate(): SingleCalendarValue;
    set maxDate(maxDate: SingleCalendarValue);
    get minTime(): SingleCalendarValue;
    set minTime(minTime: SingleCalendarValue);
    get maxTime(): SingleCalendarValue;
    set maxTime(maxTime: SingleCalendarValue);
    get displayDate(): SingleCalendarValue;
    set displayDate(displayDate: SingleCalendarValue);
    open: EventEmitter<void>;
    close: EventEmitter<void>;
    onChange: EventEmitter<CalendarValue>;
    onGoToCurrent: EventEmitter<void>;
    onLeftNav: EventEmitter<INavEvent>;
    onRightNav: EventEmitter<INavEvent>;
    onSelect: EventEmitter<ISelectionEvent>;
    datePicker: DatePickerComponent;
    api: IDpDayPickerApi;
    private _config;
    private _attachTo;
    private _theme;
    private _mode;
    private _minDate;
    private _maxDate;
    private _minTime;
    private _maxTime;
    private _displayDate;
    constructor(viewContainerRef: ViewContainerRef, elemRef: ElementRef, componentFactoryResolver: ComponentFactoryResolver, service: DatePickerDirectiveService, formControl: NgControl, utilsService: UtilsService);
    ngOnInit(): void;
    createDatePicker(): DatePickerComponent;
    attachModelToDatePicker(): void;
    onClick(): void;
    onFocus(): void;
    onEnter(): void;
    markForCheck(): void;
    private updateDatepickerConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerDirective, [null, null, null, null, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DatePickerDirective, "[dpDayPicker]", ["dpDayPicker"], { "config": "dpDayPicker"; "attachTo": "attachTo"; "theme": "theme"; "mode": "mode"; "minDate": "minDate"; "maxDate": "maxDate"; "minTime": "minTime"; "maxTime": "maxTime"; "displayDate": "displayDate"; }, { "open": "open"; "close": "close"; "onChange": "onChange"; "onGoToCurrent": "onGoToCurrent"; "onLeftNav": "onLeftNav"; "onRightNav": "onRightNav"; "onSelect": "onSelect"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcGlja2VyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbGVuZGFyTW9kZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9jYWxlbmRhci1tb2RlJztcbmltcG9ydCB7IElEYXRlUGlja2VyRGlyZWN0aXZlQ29uZmlnIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1kaXJlY3RpdmUtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IERhdGVQaWNrZXJEaXJlY3RpdmVTZXJ2aWNlIH0gZnJvbSAnLi9kYXRlLXBpY2tlci1kaXJlY3RpdmUuc2VydmljZSc7XG5pbXBvcnQgeyBJRHBEYXlQaWNrZXJBcGkgfSBmcm9tICcuL2RhdGUtcGlja2VyLmFwaSc7XG5pbXBvcnQgeyBEYXRlUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2FsZW5kYXJWYWx1ZSwgSVNlbGVjdGlvbkV2ZW50LCBTaW5nbGVDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgSU5hdkV2ZW50IH0gZnJvbSAnLi4vY29tbW9uL21vZGVscy9uYXZpZ2F0aW9uLWV2ZW50Lm1vZGVsJztcbmltcG9ydCB7IFV0aWxzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zZXJ2aWNlcy91dGlscy91dGlscy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVQaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XG4gICAgZWxlbVJlZjogRWxlbWVudFJlZjtcbiAgICBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBzZXJ2aWNlOiBEYXRlUGlja2VyRGlyZWN0aXZlU2VydmljZTtcbiAgICBmb3JtQ29udHJvbDogTmdDb250cm9sO1xuICAgIHV0aWxzU2VydmljZTogVXRpbHNTZXJ2aWNlO1xuICAgIGdldCBjb25maWcoKTogSURhdGVQaWNrZXJEaXJlY3RpdmVDb25maWc7XG4gICAgc2V0IGNvbmZpZyhjb25maWc6IElEYXRlUGlja2VyRGlyZWN0aXZlQ29uZmlnKTtcbiAgICBnZXQgYXR0YWNoVG8oKTogRWxlbWVudFJlZiB8IHN0cmluZztcbiAgICBzZXQgYXR0YWNoVG8oYXR0YWNoVG86IEVsZW1lbnRSZWYgfCBzdHJpbmcpO1xuICAgIGdldCB0aGVtZSgpOiBzdHJpbmc7XG4gICAgc2V0IHRoZW1lKHRoZW1lOiBzdHJpbmcpO1xuICAgIGdldCBtb2RlKCk6IENhbGVuZGFyTW9kZTtcbiAgICBzZXQgbW9kZShtb2RlOiBDYWxlbmRhck1vZGUpO1xuICAgIGdldCBtaW5EYXRlKCk6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgc2V0IG1pbkRhdGUobWluRGF0ZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZSk7XG4gICAgZ2V0IG1heERhdGUoKTogU2luZ2xlQ2FsZW5kYXJWYWx1ZTtcbiAgICBzZXQgbWF4RGF0ZShtYXhEYXRlOiBTaW5nbGVDYWxlbmRhclZhbHVlKTtcbiAgICBnZXQgbWluVGltZSgpOiBTaW5nbGVDYWxlbmRhclZhbHVlO1xuICAgIHNldCBtaW5UaW1lKG1pblRpbWU6IFNpbmdsZUNhbGVuZGFyVmFsdWUpO1xuICAgIGdldCBtYXhUaW1lKCk6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgc2V0IG1heFRpbWUobWF4VGltZTogU2luZ2xlQ2FsZW5kYXJWYWx1ZSk7XG4gICAgZ2V0IGRpc3BsYXlEYXRlKCk6IFNpbmdsZUNhbGVuZGFyVmFsdWU7XG4gICAgc2V0IGRpc3BsYXlEYXRlKGRpc3BsYXlEYXRlOiBTaW5nbGVDYWxlbmRhclZhbHVlKTtcbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPENhbGVuZGFyVmFsdWU+O1xuICAgIG9uR29Ub0N1cnJlbnQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBvbkxlZnROYXY6IEV2ZW50RW1pdHRlcjxJTmF2RXZlbnQ+O1xuICAgIG9uUmlnaHROYXY6IEV2ZW50RW1pdHRlcjxJTmF2RXZlbnQ+O1xuICAgIG9uU2VsZWN0OiBFdmVudEVtaXR0ZXI8SVNlbGVjdGlvbkV2ZW50PjtcbiAgICBkYXRlUGlja2VyOiBEYXRlUGlja2VyQ29tcG9uZW50O1xuICAgIGFwaTogSURwRGF5UGlja2VyQXBpO1xuICAgIHByaXZhdGUgX2NvbmZpZztcbiAgICBwcml2YXRlIF9hdHRhY2hUbztcbiAgICBwcml2YXRlIF90aGVtZTtcbiAgICBwcml2YXRlIF9tb2RlO1xuICAgIHByaXZhdGUgX21pbkRhdGU7XG4gICAgcHJpdmF0ZSBfbWF4RGF0ZTtcbiAgICBwcml2YXRlIF9taW5UaW1lO1xuICAgIHByaXZhdGUgX21heFRpbWU7XG4gICAgcHJpdmF0ZSBfZGlzcGxheURhdGU7XG4gICAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgZWxlbVJlZjogRWxlbWVudFJlZiwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHNlcnZpY2U6IERhdGVQaWNrZXJEaXJlY3RpdmVTZXJ2aWNlLCBmb3JtQ29udHJvbDogTmdDb250cm9sLCB1dGlsc1NlcnZpY2U6IFV0aWxzU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBjcmVhdGVEYXRlUGlja2VyKCk6IERhdGVQaWNrZXJDb21wb25lbnQ7XG4gICAgYXR0YWNoTW9kZWxUb0RhdGVQaWNrZXIoKTogdm9pZDtcbiAgICBvbkNsaWNrKCk6IHZvaWQ7XG4gICAgb25Gb2N1cygpOiB2b2lkO1xuICAgIG9uRW50ZXIoKTogdm9pZDtcbiAgICBtYXJrRm9yQ2hlY2soKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZURhdGVwaWNrZXJDb25maWc7XG59XG4iXX0=