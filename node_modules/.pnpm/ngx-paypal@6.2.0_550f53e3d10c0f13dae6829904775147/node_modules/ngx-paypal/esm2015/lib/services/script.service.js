/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/script.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
let ScriptService = /** @class */ (() => {
    class ScriptService {
        /**
         * @param {?} zone
         */
        constructor(zone) {
            this.zone = zone;
        }
        /**
         * @param {?} url
         * @param {?} globalVar
         * @param {?} onReady
         * @return {?}
         */
        registerScript(url, globalVar, onReady) {
            /** @type {?} */
            const existingGlobalVar = ((/** @type {?} */ (window)))[globalVar];
            if (existingGlobalVar) {
                // global variable is present = script was already loaded
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    onReady(existingGlobalVar);
                }));
                return;
            }
            // prepare script elem
            /** @type {?} */
            const scriptElem = document.createElement('script');
            scriptElem.id = this.getElemId(globalVar);
            scriptElem.innerHTML = '';
            scriptElem.onload = (/**
             * @return {?}
             */
            () => {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    onReady(((/** @type {?} */ (window)))[globalVar]);
                }));
            });
            scriptElem.src = url;
            scriptElem.async = true;
            scriptElem.defer = true;
            // add script to header
            document.getElementsByTagName('head')[0].appendChild(scriptElem);
        }
        /**
         * @param {?} globalVar
         * @return {?}
         */
        cleanup(globalVar) {
            // remove script from DOM
            /** @type {?} */
            const scriptElem = document.getElementById(this.getElemId(globalVar));
            if (scriptElem) {
                scriptElem.remove();
            }
        }
        /**
         * @private
         * @param {?} globalVar
         * @return {?}
         */
        getElemId(globalVar) {
            return `ngx-paypal-script-elem-${globalVar}`;
        }
    }
    ScriptService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ScriptService.ctorParameters = () => [
        { type: NgZone }
    ];
    return ScriptService;
})();
export { ScriptService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ScriptService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL3NjcmlwdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQ7SUFBQSxNQUNhLGFBQWE7Ozs7UUFFdEIsWUFDYyxJQUFZO1lBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtRQUUxQixDQUFDOzs7Ozs7O1FBRUQsY0FBYyxDQUFDLEdBQVcsRUFBRSxTQUFpQixFQUFFLE9BQWlDOztrQkFDdEUsaUJBQWlCLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNwRCxJQUFJLGlCQUFpQixFQUFFO2dCQUNuQix5REFBeUQ7Z0JBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O2dCQUFDLEdBQUcsRUFBRTtvQkFDZixPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxFQUFDLENBQUM7Z0JBQ0gsT0FBTzthQUNWOzs7a0JBSUssVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxQyxVQUFVLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUMxQixVQUFVLENBQUMsTUFBTTs7O1lBQUcsR0FBRyxFQUFFO2dCQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7OztnQkFBQyxHQUFHLEVBQUU7b0JBQ2YsT0FBTyxDQUFDLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQSxDQUFDO1lBQ0YsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDckIsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDeEIsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFFeEIsdUJBQXVCO1lBQ3ZCLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckUsQ0FBQzs7Ozs7UUFFRCxPQUFPLENBQUMsU0FBaUI7OztrQkFFZixVQUFVLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJFLElBQUksVUFBVSxFQUFFO2dCQUNaLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN2QjtRQUNMLENBQUM7Ozs7OztRQUVPLFNBQVMsQ0FBQyxTQUFpQjtZQUMvQixPQUFPLDBCQUEwQixTQUFTLEVBQUUsQ0FBQztRQUNqRCxDQUFDOzs7Z0JBL0NKLFVBQVU7Ozs7Z0JBRlUsTUFBTTs7SUFrRDNCLG9CQUFDO0tBQUE7U0EvQ1ksYUFBYTs7Ozs7O0lBR2xCLDZCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2NyaXB0U2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSxcclxuICAgICkge1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyU2NyaXB0KHVybDogc3RyaW5nLCBnbG9iYWxWYXI6IHN0cmluZywgb25SZWFkeTogKGdsb2JhbFZhcjogYW55KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdHbG9iYWxWYXIgPSAod2luZG93IGFzIGFueSlbZ2xvYmFsVmFyXTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdHbG9iYWxWYXIpIHtcclxuICAgICAgICAgICAgLy8gZ2xvYmFsIHZhcmlhYmxlIGlzIHByZXNlbnQgPSBzY3JpcHQgd2FzIGFscmVhZHkgbG9hZGVkXHJcbiAgICAgICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb25SZWFkeShleGlzdGluZ0dsb2JhbFZhcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gcHJlcGFyZSBzY3JpcHQgZWxlbVxyXG4gICAgICAgIGNvbnN0IHNjcmlwdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBzY3JpcHRFbGVtLmlkID0gdGhpcy5nZXRFbGVtSWQoZ2xvYmFsVmFyKTtcclxuICAgICAgICBzY3JpcHRFbGVtLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIHNjcmlwdEVsZW0ub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9uUmVhZHkoKHdpbmRvdyBhcyBhbnkpW2dsb2JhbFZhcl0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNjcmlwdEVsZW0uc3JjID0gdXJsO1xyXG4gICAgICAgIHNjcmlwdEVsZW0uYXN5bmMgPSB0cnVlO1xyXG4gICAgICAgIHNjcmlwdEVsZW0uZGVmZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBhZGQgc2NyaXB0IHRvIGhlYWRlclxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0RWxlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYW51cChnbG9iYWxWYXI6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIC8vIHJlbW92ZSBzY3JpcHQgZnJvbSBET01cclxuICAgICAgICBjb25zdCBzY3JpcHRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5nZXRFbGVtSWQoZ2xvYmFsVmFyKSk7XHJcblxyXG4gICAgICAgIGlmIChzY3JpcHRFbGVtKSB7XHJcbiAgICAgICAgICAgIHNjcmlwdEVsZW0ucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RWxlbUlkKGdsb2JhbFZhcjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYG5neC1wYXlwYWwtc2NyaXB0LWVsZW0tJHtnbG9iYWxWYXJ9YDtcclxuICAgIH1cclxufVxyXG4iXX0=