{"version":3,"file":"ngx-paypal.js","sources":["../../src/lib/services/script.service.ts","../../src/lib/services/paypal-script.service.ts","../../src/lib/components/paypal.component.ts","../../src/lib/ngx-paypal.module.ts","../../src/lib/models/paypal-models.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\r\n        const existingGlobalVar = (window as any)[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(globalVar: string): void {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n\r\n    private getElemId(globalVar: string): string {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class PayPalScriptService {\r\n\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n\r\n    constructor(\r\n        protected scriptService: ScriptService,\r\n    ) {\r\n    }\r\n\r\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n\r\n    destroyPayPalScript(): void {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n\r\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\r\n        const params: IQueryParam[] = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n\r\n    private getQueryString(queryParams: IQueryParam[]): string {\r\n        let queryString = '';\r\n\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            } else {\r\n                queryString += '&';\r\n            }\r\n\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n\r\n        return queryString;\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n    ICancelCallbackData,\r\n    IClientAuthorizeCallbackData,\r\n    ICreateOrderCallbackActions,\r\n    IInitCallbackData,\r\n    IOnApproveCallbackActions,\r\n    IOnApproveCallbackData,\r\n    IOnClickCallbackActions,\r\n    IOnInitCallbackActions,\r\n    IOnShippingChangeActions,\r\n    IOnShippingChangeData,\r\n    IPayPalConfig,\r\n    ICreateSubscriptionCallbackActions,\r\n    ICreateSubscriptionCallbackData,\r\n} from '../models/paypal-models';\r\nimport { PayPalScriptService } from '../services/paypal-script.service';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config?: IPayPalConfig;\r\n\r\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\r\n    @Input() registerScript: boolean = true;\r\n\r\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\r\n    @Output() scriptLoaded = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    private payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainer', { static: false }) set payPalButtonContainer(content: ElementRef) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n\r\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\r\n    private initializePayPal: boolean = true;\r\n\r\n    /**\r\n     * Reference to PayPal global API\r\n     */\r\n    private payPal: any;\r\n\r\n    constructor(\r\n        private paypalScriptService: PayPalScriptService,\r\n        private cdr: ChangeDetectorRef,\r\n        private ngZone: NgZone\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n\r\n        // first time config setup\r\n        const config = this.config;\r\n\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    customInit(payPal: any): void {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    reinitialize(config: IPayPalConfig | undefined): void {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n\r\n        this.cdr.detectChanges();\r\n\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            } else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private doPayPalCheck(): void {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n\r\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n\r\n    private generateElementId(): string {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n\r\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            const createOrder = (data: any, actions: ICreateOrderCallbackActions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                });\r\n            };\r\n            const createSubscription = (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createSubscription) {\r\n                        return config.createSubscription(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const onShippingChange = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const buttonsConfig = {\r\n                style: config.style,\r\n                onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\r\n                                this.ngZone.run(() => {\r\n                                    onClientAuthorization(details);\r\n                                });\r\n                            });\r\n                            return;\r\n                        }\r\n                    });\r\n                },\r\n                onError: (error: any) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                },\r\n                onCancel: (data: ICancelCallbackData, actions: any) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onClick: (data: any, actions: IOnClickCallbackActions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                onInit: (data: IInitCallbackData, actions: IOnInitCallbackActions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                },\r\n                // Add the functions if they've been created in the config object\r\n                // The API only allows one of the two to be set\r\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\r\n                ...(config.createSubscription && { createSubscription }),\r\n                // The onShippingChange callback cannot be used with subscriptions\r\n                // so we only add it if it is set\r\n                ...(config.onShippingChange && { onShippingChange })\r\n            };\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n}\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal.component';\r\nimport { ScriptService } from './services/script.service';\r\nimport { PayPalScriptService } from './services/paypal-script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    PayPalScriptService\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n","\r\nexport interface IPayPalConfig {\r\n    /**\r\n     * Currency - Defaults to USD if not provided\r\n     */\r\n    currency?: string;\r\n\r\n    /**\r\n    * Use when creating order on client\r\n    */\r\n    createOrderOnClient?: (data: any) => ICreateOrderRequest;\r\n\r\n    /**\r\n     * Use for creating orders on server. PayPal expects you to return 'orderId' in this method\r\n     */\r\n    createOrderOnServer?: (data: any) => Promise<string>;\r\n\r\n    /**\r\n     * Advanced configuration\r\n     */\r\n    advanced?: IAdvancedConfiguration;\r\n\r\n    /**\r\n     * Client id\r\n     */\r\n    clientId: string;\r\n\r\n    /**\r\n     * Shipping callback\r\n     * see https://developer.paypal.com/docs/checkout/integration-features/shipping-callback/\r\n     */\r\n    onShippingChange?: OnShippingChangeCallback;\r\n\r\n    /**\r\n     * Called when 'onApprove' event occurs\r\n     */\r\n    onApprove?: (data: IOnApproveCallbackData, actions: any) => void;\r\n\r\n    /**\r\n    * Called when authorization on client succeeds\r\n    */\r\n    onClientAuthorization?: (authorization: IClientAuthorizeCallbackData) => void;\r\n\r\n    /**\r\n     * Implement for authorizing on server side\r\n     */\r\n    authorizeOnServer?: (data: IOnApproveCallbackData, actions: any) => Promise<any>;\r\n\r\n    /**\r\n     * Button style configuration\r\n     */\r\n    style?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Error handler\r\n     */\r\n    onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Click handler\r\n     */\r\n    onClick?: (data: any, actions: IOnClickCallbackActions) => void;\r\n\r\n    /**\r\n     * Cancel handler\r\n     */\r\n    onCancel?: (data: ICancelCallbackData, actions: any) => void;\r\n\r\n    /**\r\n     * Init handler.\r\n     * can be used for validation, see: https://developer.paypal.com/docs/checkout/integration-features/validation/#\r\n     */\r\n    onInit?: (data: IInitCallbackData, actions: IOnInitCallbackActions) => void;\r\n\r\n    /**\r\n     * Create subscription handler\r\n     * https://developer.paypal.com/docs/subscriptions/integrate/\r\n     *\r\n     * Note: the vault property in the advanced configuration also has to be set to true\r\n     */\r\n    createSubscription?: (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => void;\r\n\r\n    /**\r\n     * Vault - must be set to true when creating subscriptions\r\n     */\r\n    vault?: TrueFalse;\r\n}\r\n\r\nexport type TrueFalse = 'true' | 'false';\r\n\r\nexport interface IPayPalUrlConfig {\r\n    clientId: string;\r\n    currency?: string;\r\n    commit?: TrueFalse;\r\n    vault?: TrueFalse;\r\n    extraParams?: IQueryParam[];\r\n}\r\n\r\nexport interface IOrderDetails {\r\n    create_time: string;\r\n    update_time: string;\r\n    id: string;\r\n    intent: OrderIntent;\r\n    payer: IPayer;\r\n    status: OrderStatus;\r\n    links: ILinkDescription[];\r\n    purchase_units: IPurchaseUnit[];\r\n}\r\n\r\nexport interface IClientAuthorizeCallbackData extends IOrderDetails {\r\n    links: ILinkDescription[];\r\n}\r\n\r\nexport interface ILinkDescription {\r\n    href: string;\r\n    rel: String;\r\n    method?: LinkMethod;\r\n}\r\n\r\nexport interface IQueryParam {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport type OnShippingChangeCallback = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => any;\r\n\r\nexport interface IOnShippingChangeData {\r\n    paymentToken: string;\r\n    shipping_address: any;\r\n    selected_shipping_method?: any;\r\n}\r\n\r\nexport interface IOnShippingChangeActions {\r\n    resolve: () => any;\r\n    reject: () => any;\r\n    patch: () => any;\r\n}\r\n\r\nexport type LinkMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'PATCH';\r\n\r\nexport interface IAdvancedConfiguration {\r\n    commit?: TrueFalse;\r\n    extraQueryParams?: IQueryParam[];\r\n}\r\n\r\nexport interface IOnApproveCallbackData {\r\n    orderID: string;\r\n    payerID: string;\r\n    subscriptionID: string;\r\n}\r\n\r\nexport interface ICreateOrderCallbackActions {\r\n    order: {\r\n        create: (order: ICreateOrderRequest) => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface ICancelCallbackData {\r\n    orderID: string;\r\n}\r\n\r\nexport interface IOnApproveCallbackActions {\r\n    redirect: () => void;\r\n    restart: () => void;\r\n    order: {\r\n        authorize: () => Promise<any>;\r\n        capture: () => Promise<any>;\r\n        get: () => Promise<IOrderDetails>;\r\n        patch: () => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface IOnInitCallbackActions {\r\n    enable: () => void;\r\n    disable: () => void;\r\n}\r\n\r\nexport interface ICreateSubscriptionCallbackActions {\r\n    subscription: {\r\n        create: (subscription: ICreateSubscriptionRequest) => Promise<any>;\r\n    };\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface IInitCallbackData {\r\n}\r\n\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface ICreateSubscriptionCallbackData {\r\n}\r\n\r\nexport interface IOnClickCallbackActions {\r\n    resolve: () => void;\r\n    reject: () => void;\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'paypal' | 'checkout' | 'pay' | 'installment' | 'buynow';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver' | 'white' | 'black';\r\n    layout?: 'horizontal' | 'vertical';\r\n    tagline?: boolean;\r\n    height?: number;\r\n}\r\n\r\nexport interface ICreateOrderRequest {\r\n    intent: OrderIntent;\r\n    purchase_units: IPurchaseUnit[];\r\n\r\n    payer?: IPayer;\r\n    application_context?: IApplicationContext;\r\n\r\n}\r\n\r\nexport interface ICreateSubscriptionRequest {\r\n    plan_id: string;\r\n    quantity?: number;\r\n}\r\n\r\nexport interface IPayer {\r\n    name?: IPartyName;\r\n    email_address?: string;\r\n    payer_id?: string;\r\n    birth_date?: string;\r\n    tax_info?: ITaxInfo;\r\n    address?: IAddressPortable;\r\n}\r\n\r\nexport interface IApplicationContext {\r\n    brand_name?: string;\r\n    locale?: string;\r\n    landing_page?: PaypalLandingPage;\r\n    shipping_preference?: ShippingPreference;\r\n    user_action?: PayPalUserAction;\r\n    payment_method?: IPaymentMethod;\r\n    return_url?: string;\r\n    cancel_url?: string;\r\n}\r\n\r\nexport interface IPaymentMethod {\r\n    payer_selected?: PayerSelected;\r\n    payee_preferred?: PayeePreferred;\r\n}\r\n\r\nexport type PayeePreferred = 'UNRESTRICTED' | 'IMMEDIATE_PAYMENT_REQUIRED';\r\n\r\nexport type PayerSelected = 'PAYPAL_CREDIT' | 'PAYPAL';\r\n\r\nexport type PayPalUserAction = 'CONTINUE' | 'PAY_NOW';\r\n\r\nexport type ShippingPreference = 'GET_FROM_FILE' | 'NO_SHIPPING' | 'SET_PROVIDED_ADDRESS';\r\n\r\nexport type PaypalLandingPage = 'LOGIN' | 'BILLING';\r\n\r\nexport type OrderIntent = 'CAPTURE' | 'AUTHORIZE';\r\n\r\nexport type DisbursementMode = 'INSTANT' | 'DELAYED';\r\n\r\nexport type ItemCategory = 'DIGITAL_GOODS' | 'PHYSICAL_GOODS';\r\n\r\nexport type PhoneType = 'FAX' | 'HOME' | 'MOBILE' | 'OTHER' | 'PAGER';\r\n\r\nexport type TaxIdType = 'BR_CPF' | 'BR_CNPJ';\r\n\r\nexport interface IPhone {\r\n    phone_type?: PhoneType;\r\n    phone_number?: IPhoneNumber;\r\n}\r\n\r\nexport interface ITaxInfo {\r\n    tax_id: string;\r\n    tax_id_type: TaxIdType;\r\n}\r\n\r\nexport interface IPhoneNumber {\r\n    national_number: string;\r\n}\r\n\r\nexport interface IPurchaseUnit {\r\n    amount: IUnitAmount;\r\n\r\n    reference_id?: string;\r\n    payee?: IPayee;\r\n    payment_instruction?: IPaymentInstructions;\r\n    description?: string;\r\n    custom_id?: string;\r\n    invoice_id?: string;\r\n    soft_descriptor?: string;\r\n    items: ITransactionItem[];\r\n    shipping?: IShipping;\r\n}\r\n\r\nexport interface IPayee {\r\n    email_address?: string;\r\n    merchant_id?: string;\r\n}\r\n\r\nexport interface IPaymentInstructions {\r\n    platform_fees?: IPlatformFee[];\r\n    disbursement_mode?: DisbursementMode;\r\n}\r\n\r\nexport interface IPlatformFee {\r\n    amount: IUnitAmount;\r\n    payee?: IPayee;\r\n}\r\n\r\nexport interface ITransactionItem {\r\n    name: string;\r\n    unit_amount: IUnitAmount;\r\n    quantity: string;\r\n\r\n    description?: string;\r\n    sku?: string;\r\n    category?: ItemCategory;\r\n    tax?: ITax;\r\n}\r\n\r\nexport interface ITax {\r\n    currency_code: string;\r\n    value: string;\r\n}\r\n\r\nexport interface IUnitAmount {\r\n    currency_code: string;\r\n    value: string;\r\n    breakdown?: IUnitBreakdown;\r\n}\r\n\r\nexport interface IMoney {\r\n    currency_code: string;\r\n    value: string;\r\n}\r\n\r\nexport interface IUnitBreakdown {\r\n    item_total?: IUnitAmount;\r\n    shipping?: IUnitAmount;\r\n    handling?: IUnitAmount;\r\n    tax_total?: IUnitAmount;\r\n    insurance?: IUnitAmount;\r\n    shipping_discount?: IUnitAmount;\r\n    discount?: IMoney;\r\n}\r\n\r\nexport interface IPartyName {\r\n    prefix?: string;\r\n    given_name?: string;\r\n    surname?: string;\r\n    middle_name?: string;\r\n    suffix?: string;\r\n    alternate_full_name?: string;\r\n    full_name?: string;\r\n}\r\n\r\nexport interface IAddressPortable {\r\n    country_code: string;\r\n\r\n    address_line_1?: string;\r\n    address_line_2?: string;\r\n    admin_area_2?: string;\r\n    admin_area_1?: string;\r\n    postal_code?: string;\r\n}\r\n\r\nexport interface IShipping {\r\n    name?: IPartyName;\r\n    address?: IAddressPortable;\r\n}\r\n\r\nexport type OrderStatus = 'APPROVED' | 'SAVED' | 'CREATED' | 'VOIDED' | 'COMPLETED';\r\n\r\n\r\n"],"names":[],"mappings":"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"}