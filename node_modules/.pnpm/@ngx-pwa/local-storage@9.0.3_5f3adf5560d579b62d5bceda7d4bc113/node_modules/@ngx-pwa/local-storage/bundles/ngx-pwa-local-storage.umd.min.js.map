{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ngx-pwa/local-storage/lib/databases/exceptions.ts","ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/memory-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","ng://@ngx-pwa/local-storage/lib/storages/exceptions.ts","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/storages/storage-map.service.ts","ng://@ngx-pwa/local-storage/lib/storages/local-storage.service.ts","ng://@ngx-pwa/local-storage/lib/storage.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__values","o","s","Symbol","iterator","m","call","next","value","done","TypeError","IDBBrokenError","_super","_this","apply","message","Error","SERIALIZATION_ERROR","SerializationError","LS_PREFIX","InjectionToken","providedIn","factory","IDB_DB_NAME","IDB_DB_VERSION","IDB_STORE_NAME","IDB_NO_WRAP","IndexedDBDatabase","dbName","storeName","dbVersion","noWrap","database","ReplaySubject","wrapIndex","connect","store","version","transaction","pipe","mergeMap","transactionData","events","request","count","map","result","first","get","undefined","set","data","delete","dataToStore","_a","put","mapTo","clear","keys","openKeyCursor","openCursor","success$","fromEvent","takeWhile","toString","tap","continue","error$","listenError","race","has","getKey","indexedDB","open","error","createStore","subscribe","objectStoreNames","contains","createObjectStore","mode","throwError","objectStore","listenTransactionEvents","of","transactionOrRequest","complete$","Inject","args","Injectable","LocalStorageDatabase","prefix","localStorage","parsedData","unparsedData","getItem","prefixKey","JSON","parse","serializedData","dataPrototype","getPrototypeOf","isArray","stringify","setItem","removeItem","Observable","subscriber","index","getUnprefixedKey","complete","observeOn","asyncScheduler","prefixedKey","substr","MemoryDatabase","memoryStorage","Map","size","rawData","from","localDatabaseFactory","platformId","LSPrefix","IDBDBName","IDBStoreName","IDBDBVersion","IDBNoWrap","isPlatformBrowser","LocalDatabase","useFactory","deps","PLATFORM_ID","VALIDATION_ERROR","ValidationError","JSONValidator","validate","schema","type","validateString","validateNumber","validateBoolean","validateArray","validateObject","validateConst","validateEnum","maxLength","minLength","pattern","regularExpression","RegExp","test","Number","isInteger","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxItems","minItems","uniqueItems","dataSet","Set","items","validateTuple","data_1","data_1_1","schemas","properties","required","_b","_c","requiredProp","property","const","enum","includes","StorageMap","jsonValidator","notifiers","catchIDBBroken","backingStore","notify","watch","notifier","asObservable","operationCallback","catchError","LocalStorage","storageMap","schemaFinal","StorageModule","forRoot","config","ngModule","StorageModule_1","providers","provide","useValue","NgModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Exception message when `indexedDB` is not working\n */\nexport const IDB_BROKEN_ERROR = 'indexedDB is not working';\n\n/**\n * Exception raised when `indexedDB` is not working\n */\nexport class IDBBrokenError extends Error {\n  message = IDB_BROKEN_ERROR;\n}\n\n/**\n * Exception message when a value can't be serialized for `localStorage`\n */\nexport const SERIALIZATION_ERROR = `The storage is currently localStorage,\nwhere data must be serialized, and the provided data can't be serialized.`;\n\n/**\n * Exception raised when a value can't be serialized for `localStorage`\n */\nexport class SerializationError extends Error {\n  message = SERIALIZATION_ERROR;\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Token to provide a prefix to `localStorage` keys.\n */\nexport const LS_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Default name used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_NAME = 'ngStorage';\n\n/**\n * Token to provide `indexedDB` database name.\n */\nexport const IDB_DB_NAME = new InjectionToken<string>('localStorageIDBDBName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_NAME\n});\n\n/**\n * Default version used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_VERSION = 1;\n\n/**\n * Token to provide `indexedDB` database version.\n * Must be an unsigned **integer**.\n */\nexport const IDB_DB_VERSION = new InjectionToken<number>('localStorageIDBDBVersion', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_VERSION\n});\n\n/**\n * Default name used for `indexedDB` object store.\n */\nexport const DEFAULT_IDB_STORE_NAME = 'localStorage';\n\n/**\n * Token to provide `indexedDB` store name.\n * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.\n */\nexport const IDB_STORE_NAME = new InjectionToken<string>('localStorageIDBStoreName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_STORE_NAME\n});\n\n/**\n * Default value for interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n */\nexport const DEFAULT_IDB_NO_WRAP = true;\n\n/**\n * Token to allow interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Defaults to `true`. Change to `false` for backward compatiblity in existing applications.\n * **DO NOT CHANGE THIS BEHAVIOR ONCE IN PRODUCTION**, as it would break with existing data.\n */\nexport const IDB_NO_WRAP = new InjectionToken<boolean>('localStorageIDBWrap', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_NO_WRAP\n});\n\nexport interface StorageConfig {\n\n  /**\n   * Allows to add a prefix before `localStorage` keys.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  LSPrefix?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` database.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBName?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` object store.\n   * *Use only* for interoperability with other APIs.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBStoreName?: string;\n\n  /**\n   * Allows to change the database version used for `indexedDB` database.\n   * Must be an unsigned **integer**.\n   * **Use with caution as the creation of the store depends on the version.**\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBVersion?: number;\n\n  /**\n   * Allows interoperability with native `indexedDB` and other storage libs,\n   * by changing how values are stored in `indexedDB` database.\n   * Defaults to `true`. Change to `false` for backward compatiblity in existing applications.\n   * **DO NOT CHANGE THIS BEHAVIOR ONCE IN PRODUCTION**, as it would break with existing data.\n   */\n  IDBNoWrap?: boolean;\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first, takeWhile, tap, mapTo } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { IDBBrokenError } from './exceptions';\nimport {\n  IDB_DB_NAME, IDB_STORE_NAME, DEFAULT_IDB_STORE_NAME, IDB_DB_VERSION,\n  DEFAULT_IDB_DB_NAME, DEFAULT_IDB_DB_VERSION, IDB_NO_WRAP, DEFAULT_IDB_NO_WRAP\n} from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * `indexedDB` database name\n   */\n  protected readonly dbName: string;\n\n  /**\n   * `indexedDB` object store name\n   */\n  protected readonly storeName: string;\n\n  /**\n   * `indexedDB` database version. Must be an unsigned **integer**\n   */\n  protected readonly dbVersion: number;\n\n  /**\n   * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected readonly database = new ReplaySubject<IDBDatabase>(1);\n\n  /**\n   * Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility.\n   */\n  protected readonly noWrap: boolean;\n\n  /**\n   * Index used when wrapping value. *For backward compatibility only.*\n   */\n  protected readonly wrapIndex = 'value';\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param dbName `indexedDB` database name\n   * @param storeName `indexedDB` store name\n   * @param dbVersion `indexedDB` database version\n   * @param noWrap Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility\n   */\n  constructor(\n    @Inject(IDB_DB_NAME) dbName = DEFAULT_IDB_DB_NAME,\n    @Inject(IDB_STORE_NAME) storeName = DEFAULT_IDB_STORE_NAME,\n    @Inject(IDB_DB_VERSION) dbVersion = DEFAULT_IDB_DB_VERSION,\n    @Inject(IDB_NO_WRAP) noWrap = DEFAULT_IDB_NO_WRAP,\n  ) {\n\n    this.dbName = dbName;\n    this.storeName = storeName;\n    this.dbVersion = dbVersion;\n    this.noWrap = noWrap;\n\n    /* Connect to `indexedDB`, with prefix if provided by the user */\n    this.connect();\n\n  }\n\n  /**\n   * Information about `indexedDB` connection. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return {\n      database: this.dbName,\n      store: this.storeName,\n      version: this.dbVersion,\n    };\n\n  }\n\n  /**\n   * Number of items in our `indexedDB` database and object store\n   */\n  get size(): Observable<number> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Request to know the number of items */\n        const request = store.count();\n\n        /* Return the result */\n        return events.pipe(map(() => request.result));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Gets an item value in our `indexedDB` store\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`\n   */\n  get<T = unknown>(key: string): Observable<T | undefined> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Request the value with the key provided by the user */\n        const request = store.get(key);\n\n        /* Listen events and return the result */\n        return events.pipe(map(() => {\n\n          if ((request.result !== undefined) && (request.result !== null)) {\n\n            /* Prior to v8, the value was wrapped in an `{ value: ...}` object */\n            if (!this.noWrap && (typeof request.result === 'object') && (this.wrapIndex in request.result) &&\n            (request.result[this.wrapIndex] !== undefined) && (request.result[this.wrapIndex] !== null)) {\n\n              return (request.result[this.wrapIndex] as T);\n\n            } else {\n\n              /* Cast to the wanted type */\n              return request.result as T;\n\n            }\n\n          }\n\n          /* Return `undefined` if the value is empty */\n          return undefined;\n\n        }));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Sets an item in our `indexedDB` store\n   * @param key The item's key\n   * @param data The item's value\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: unknown): Observable<undefined> {\n\n    /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */\n    if (data === undefined) {\n      return this.delete(key);\n    }\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Prior to v8, data was wrapped in a `{ value: ... }` object */\n        const dataToStore = this.noWrap ? data : { [this.wrapIndex]: data };\n\n        /* Add if the item is not existing yet, or update otherwise */\n        store.put(dataToStore, key);\n\n        /* Listen to events and return `undefined` as no value is expected */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes an item in our `indexedDB` store\n   * @param key The item's key\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Delete the item in store */\n        store.delete(key);\n\n        /* Listen to events and return `undefined` as no data is expected here */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes all items from our `indexedDB` objet store\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Delete all items in object store */\n        store.clear();\n\n        /* Listen to events and return `undefined` as no data is expected here */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Get all the keys in our `indexedDB` store\n   * @returns An RxJS `Observable` iterating on each key\n   */\n  keys(): Observable<string> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      /* `first()` is used as the final operator in other methods to complete the `Observable`\n       * (as it all starts from a `ReplaySubject` which never ends),\n       * but as this method is iterating over multiple values, `first()` **must** be used here */\n      first(),\n      mergeMap((transactionData) => {\n\n        const { store } = transactionData;\n\n        /* Open a cursor on the store\n         * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE/Edge)\n         * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */\n        const request = ('openKeyCursor' in store) ? store.openKeyCursor() : (store as IDBObjectStore).openCursor();\n\n        /* Listen to success event */\n        const success$ = fromEvent(request, 'success').pipe(\n          /* Stop the `Observable` when the cursor is `null` */\n          takeWhile(() => (request.result !== null)),\n          /* This lib only allows string keys, but user could have added other types of keys from outside\n           * It's OK to cast as the cursor as been tested in the previous operator */\n          map(() => (request.result as IDBCursor).key.toString()),\n          /* Iterate on the cursor */\n          tap(() => { (request.result as IDBCursor).continue(); }),\n        );\n\n        /* Listen to error event and if so, throw an error */\n        const error$ = this.listenError(request);\n\n        /* Choose the first event to occur */\n        return race([success$, error$]);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in our `indexedDB` store\n   * @returns An RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Check if the key exists in the store\n         * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n         * In older browsers, the value is checked instead, but it could lead to an exception\n         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n         * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69\n         */\n        const request =  ('getKey' in store) ? store.getKey(key) : (store as IDBObjectStore).get(key);\n\n        /* Listen to events and return `true` or `false` */\n        return events.pipe(map(() => (request.result !== undefined) ? true : false));\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Connects to `indexedDB` and creates the object store on first time\n   */\n  protected connect(): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connect to `indexedDB`\n     * Will fail in Safari cross-origin iframes\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */\n    try {\n\n      /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */\n      request = indexedDB.open(this.dbName, this.dbVersion);\n\n    } catch {\n\n      this.database.error(new IDBBrokenError());\n\n      return;\n\n    }\n\n    /* Create store on first connection */\n    this.createStore(request);\n\n    /* Listen to success and error events */\n    const success$ = fromEvent(request, 'success');\n    const error$ = this.listenError(request);\n\n    /* Choose the first to occur */\n    race([success$, error$])\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          /* Register the database connection in the `ReplaySubject` for further access */\n          this.database.next(request.result);\n        },\n        error: () => {\n          /* Firefox private mode issue: fallback storage if IndexedDb connection is failing\n          * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n          * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */\n          this.database.error(new IDBBrokenError());\n        },\n      });\n\n  }\n\n  /**\n   * Create store on first use of `indexedDB`\n   * @param request `indexedDB` database opening request\n   */\n  protected createStore(request: IDBOpenDBRequest): void {\n\n    /* Listen to the event fired on first connection */\n    fromEvent(request, 'upgradeneeded')\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n\n          /* Check if the store already exists, to avoid error */\n          if (!request.result.objectStoreNames.contains(this.storeName)) {\n\n            /* Create the object store */\n            request.result.createObjectStore(this.storeName);\n\n          }\n\n        }\n      });\n\n  }\n\n  /**\n   * Open an `indexedDB` transaction and get our store\n   * @param mode `readonly` or `readwrite`\n   * @returns An `indexedDB` transaction store and events, wrapped in an RxJS `Observable`\n   */\n  protected transaction(mode: IDBTransactionMode): Observable<{\n    store: IDBObjectStore;\n    events: Observable<Event>;\n  }> {\n\n    /* From the `indexedDB` connection, open a transaction and get the store */\n    return this.database\n      .pipe(mergeMap((database) => {\n\n        let transaction: IDBTransaction;\n\n        try {\n\n          transaction = database.transaction([this.storeName], mode);\n\n        } catch (error) {\n\n            /* The store could have been deleted from outside */\n            return throwError(error as DOMException);\n\n        }\n\n        /* Get the store from the transaction */\n        const store = transaction.objectStore(this.storeName);\n\n        /* Listen transaction `complete` and `error` events */\n        const events = this.listenTransactionEvents(transaction);\n\n        return of({ store, events });\n\n      }));\n\n  }\n\n  /**\n   * Listen errors on a transaction or request, and throw if trigerred\n   * @param transactionOrRequest `indexedDb` transaction or request to listen\n   * @returns An `Observable` listening to errors\n   */\n  protected listenError(transactionOrRequest: IDBTransaction | IDBRequest): Observable<never> {\n\n    return fromEvent(transactionOrRequest, 'error').pipe(\n      /* Throw on error to be able to catch errors in RxJS way */\n      mergeMap(() => throwError(transactionOrRequest.error)),\n    );\n\n  }\n\n  /**\n   * Listen transaction `complete` and `error` events\n   * @param transaction Transaction to listen\n   * @returns An `Observable` listening to transaction `complete` and `error` events\n   */\n  protected listenTransactionEvents(transaction: IDBTransaction): Observable<Event> {\n\n    /* Listen to the `complete` event */\n    const complete$ = fromEvent(transaction, 'complete');\n\n    /* Listen to the `error` event */\n    const error$ = this.listenError(transaction);\n\n    /* Choose the first event to occur */\n    return race([complete$, error$]);\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of, throwError, asyncScheduler } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { SerializationError } from './exceptions';\nimport { LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /**\n   * Optional user prefix to avoid collision for multiple apps on the same subdomain\n   */\n  readonly prefix: string;\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    @Inject(LS_PREFIX) prefix = '',\n  ) {\n\n    /* Prefix if asked, or no prefix otherwise */\n    this.prefix = prefix || '';\n\n  }\n\n  /**\n   * Number of items in `localStorage`\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(localStorage.length);\n\n  }\n\n  /**\n   * Gets an item value in `localStorage`\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n  get<T = unknown>(key: string): Observable<T | undefined> {\n\n    /* Get raw data */\n    const unparsedData = localStorage.getItem(this.prefixKey(key));\n\n    let parsedData: T | undefined;\n\n    /* No need to parse if data is `null` or `undefined` */\n    if ((unparsedData !== undefined) && (unparsedData !== null)) {\n\n      /* Try to parse */\n      try {\n        parsedData = JSON.parse(unparsedData) as T;\n      } catch (error) {\n        return throwError(error as SyntaxError);\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(parsedData);\n\n  }\n\n  /**\n   * Store an item in `localStorage`\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: unknown): Observable<undefined> {\n\n    let serializedData: string | null = null;\n\n    /* Check if data can be serialized */\n    const dataPrototype = Object.getPrototypeOf(data);\n    if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&\n    !((dataPrototype === Object.prototype) || (dataPrototype === null))) {\n      return throwError(new SerializationError());\n    }\n\n    /* Try to stringify (can fail on circular references) */\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return throwError(error as TypeError);\n    }\n\n    /* Can fail if storage quota is exceeded */\n    try {\n      localStorage.setItem(this.prefixKey(key), serializedData);\n    } catch (error) {\n      return throwError(error as DOMException);\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    localStorage.removeItem(this.prefixKey(key));\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in `localStorage`\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    localStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in `localStorage`\n   * Note the order of the keys may be inconsistent in Firefox\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return new Observable<string>((subscriber) => {\n\n      /* Iteretate over all the indexes */\n      for (let index = 0; index < localStorage.length; index += 1) {\n\n        /* Cast as we are sure in this case the key is not `null` */\n        subscriber.next(this.getUnprefixedKey(index) as string);\n\n      }\n\n      subscriber.complete();\n\n    }).pipe(\n      /* Required to work like other databases which are asynchronous */\n      observeOn(asyncScheduler),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Itérate over all indexes in storage */\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      if (key === this.getUnprefixedKey(index)) {\n\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(true);\n\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(false);\n\n  }\n\n  /**\n   * Get an unprefixed key\n   * @param index Index of the key\n   * @returns The unprefixed key name if exists, `null` otherwise\n   */\n  protected getUnprefixedKey(index: number): string | null {\n\n    /* Get the key in storage: may have a prefix */\n    const prefixedKey = localStorage.key(index);\n\n    if (prefixedKey !== null) {\n\n      /* If no prefix, the key is already good, otherwrite strip the prefix */\n      return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);\n\n    }\n\n    return null;\n\n  }\n\n  /**\n   * Add the prefix to a key\n   * @param key The key name\n   * @returns The prefixed key name\n   */\n  protected prefixKey(key: string): string {\n\n    return `${this.prefix}${key}`;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemoryDatabase implements LocalDatabase {\n\n  /**\n   * Memory storage\n   */\n  protected memoryStorage = new Map<string, unknown>();\n\n  /**\n   * Number of items in memory\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.size);\n\n  }\n\n  /**\n   * Gets an item value in memory\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n   get<T = unknown>(key: string): Observable<T | undefined> {\n\n    const rawData = this.memoryStorage.get(key) as T | undefined;\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(rawData);\n\n  }\n\n  /**\n   * Sets an item in memory\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   set(key: string, data: unknown): Observable<undefined> {\n\n    this.memoryStorage.set(key, data);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in memory\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   delete(key: string): Observable<undefined> {\n\n    this.memoryStorage.delete(key);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in memory\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   clear(): Observable<undefined> {\n\n    this.memoryStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in memory\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return from(this.memoryStorage.keys());\n\n  }\n\n  /**\n   * Check if a key exists in memory\n   * @param key Key name\n   * @returns a RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.has(key));\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MemoryDatabase } from './memory-database';\nimport { IDB_STORE_NAME, IDB_DB_NAME, LS_PREFIX, IDB_DB_VERSION, IDB_NO_WRAP } from '../tokens';\n\n/**\n * Factory to create a storage according to browser support\n * @param platformId Context about the platform (`browser`, `server`...)\n * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain\n * @param IDBDBName `indexedDB` database name\n * @param IDBstoreName `indexedDB` storeName name\n * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/BROWSERS_SUPPORT.md}\n */\nexport function localDatabaseFactory(\n  platformId: string, LSPrefix: string, IDBDBName: string, IDBStoreName: string,\n  IDBDBVersion: number, IDBNoWrap: boolean): LocalDatabase {\n\n  /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n   * just trying to check `indexedDB` or `localStorage` variables causes a security exception.\n   * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n   */\n  try {\n\n    // Do not explicit `window` here, as the global object is not the same in web workers\n    if (isPlatformBrowser(platformId) && (indexedDB !== undefined) && (indexedDB !== null) && ('open' in indexedDB)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `indexedDB` exists (issue: IE9)\n      * - it could exist but be `undefined` or `null` (issue: IE / Edge private mode)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE10+ and all other browsers in normal mode\n      * - Chromium / Safari private mode, but in this case, data will be swiped when the user leaves the app */\n      return new IndexedDBDatabase(IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap);\n\n    } else if (isPlatformBrowser(platformId)\n    && (localStorage !== undefined) && (localStorage !== null) && ('getItem' in localStorage)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `localStorage` exists (to be sure)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE9\n      * - Safari cross-origin iframes, detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42}\n      * - IE / Edge / Firefox private mode, but in this case, data will be swiped when the user leaves the app\n      * For Firefox, can only be detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n      */\n      return new LocalStorageDatabase(LSPrefix);\n\n    }\n\n  } catch {}\n\n  /* Will be the case for:\n   * - In browsers if storage has been fully disabled (via the \"Block all cookies\" option)\n   * - Server-side rendering\n   * - All other non-browser context\n   */\n  return new MemoryDatabase();\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    LS_PREFIX,\n    IDB_DB_NAME,\n    IDB_STORE_NAME,\n    IDB_DB_VERSION,\n    IDB_NO_WRAP,\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract readonly size: Observable<number>;\n\n  abstract get<T = unknown>(key: string): Observable<T | undefined>;\n  abstract set(key: string, data: unknown): Observable<undefined>;\n  abstract delete(key: string): Observable<undefined>;\n  abstract clear(): Observable<undefined>;\n  abstract keys(): Observable<string>;\n  abstract has(key: string): Observable<boolean>;\n\n}\n","/**\n * Exception message when a value is not valid against the JSON schema\n */\nexport const VALIDATION_ERROR = `Data stored is not valid against the provided JSON schema.\nCheck your JSON schema, otherwise it means data has been corrupted.`;\n\n/**\n * Exception raised when a value is not valid against the JSON schema\n */\nexport class ValidationError extends Error {\n  message = VALIDATION_ERROR;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  JSONSchema, JSONSchemaString, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaBoolean,\n  JSONSchemaArray, JSONSchemaObject\n} from './json-schema';\n\n// TODO: detailed error messages?\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a Jsubset of the JSON Schema standard.\n   * Types are enforced to validate everything: each schema must\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema. Must have a `type`.\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  validate(data: unknown, schema: JSONSchema): boolean {\n\n    switch (schema.type) {\n\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return this.validateBoolean(data, schema);\n      case 'array':\n        return this.validateArray(data, schema);\n      case 'object':\n        return this.validateObject(data, schema);\n\n    }\n\n  }\n\n  /**\n   * Validate a string\n   * @param data Data to validate\n   * @param schema Schema describing the string\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateString(data: unknown, schema: JSONSchemaString): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if ((schema.maxLength !== undefined) && (data.length > schema.maxLength)) {\n      return false;\n    }\n\n    if ((schema.minLength !== undefined) && (data.length < schema.minLength)) {\n      return false;\n    }\n\n    if (schema.pattern) {\n\n      let regularExpression: RegExp | null = null;\n\n      try {\n        regularExpression = new RegExp(schema.pattern);\n      } catch {}\n\n      if (regularExpression && !regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a number or an integer\n   * @param data Data to validate\n   * @param schema Schema describing the number or integer\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateNumber(data: unknown, schema: JSONSchemaNumber | JSONSchemaInteger): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    /* Test is done this way to not divide by 0 */\n    if (schema.multipleOf && !Number.isInteger(data / schema.multipleOf)) {\n      return false;\n    }\n\n    if ((schema.maximum !== undefined) && (data > schema.maximum)) {\n        return false;\n    }\n\n    if ((schema.exclusiveMaximum !== undefined) && (data >= schema.exclusiveMaximum)) {\n      return false;\n\n    }\n\n    if ((schema.minimum !== undefined) && (data < schema.minimum)) {\n      return false;\n\n    }\n\n    if ((schema.exclusiveMinimum !== undefined) && (data <= schema.exclusiveMinimum)) {\n        return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a boolean\n   * @param data Data to validate\n   * @param schema Schema describing the boolean\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateBoolean(data: unknown, schema: JSONSchemaBoolean): boolean {\n\n    if (typeof data !== 'boolean') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an array\n   * @param data Data to validate\n   * @param schema Schema describing the array\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateArray(data: unknown, schema: JSONSchemaArray): boolean {\n\n    if (!Array.isArray(data)) {\n      return false;\n    }\n\n    if ((schema.maxItems !== undefined) && (data.length > schema.maxItems)) {\n      return false;\n    }\n\n    if ((schema.minItems !== undefined) && (data.length < schema.minItems)) {\n      return false;\n    }\n\n    if (schema.uniqueItems) {\n\n      /* Create a set to eliminate values with multiple occurences */\n      const dataSet = new Set(data);\n\n      if (data.length !== dataSet.size) {\n        return false;\n      }\n\n    }\n\n    /* Specific test for tuples */\n    if (Array.isArray(schema.items)) {\n\n      return this.validateTuple(data, schema.items);\n\n    }\n\n    /* Validate all the values in array */\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a tuple (array with fixed length and multiple types)\n   * @param data Data to validate\n   * @param schemas Schemas describing the tuple\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateTuple(data: unknown[], schemas: JSONSchema[]): boolean {\n\n    /* Tuples have a fixed length */\n    if (data.length !== schemas.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < schemas.length; i += 1) {\n\n      if (!this.validate(data[i], schemas[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an object\n   * @param data Data to validate\n   * @param schema JSON schema describing the object\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateObject(data: unknown, schema: JSONSchemaObject): boolean {\n\n    /* Check the type and if not `null` as `null` also have the type `object` in old browsers */\n    if ((typeof data !== 'object') || (data === null)) {\n      return false;\n    }\n\n    /* Check if the object doesn't have more properties than expected\n     * Equivalent of `additionalProperties: false`\n     */\n    if (Object.keys(schema.properties).length < Object.keys(data).length) {\n      return false;\n    }\n\n    /* Validate required properties */\n    if (schema.required) {\n\n      for (const requiredProp of schema.required) {\n\n        if (!data.hasOwnProperty(requiredProp)) {\n          return false;\n        }\n\n      }\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      /* Filter to keep only real properties (no internal JS stuff) and check if the data has the property too */\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate((data as { [k: string]: unknown; })[property], schema.properties[property])) {\n          return false;\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a constant\n   * @param data Data ta validate\n   * @param schema JSON schema describing the constant\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateConst(data: unknown, schema: JSONSchemaBoolean | JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.const) {\n      return true;\n    }\n\n    return (data === schema.const);\n\n  }\n\n  /**\n   * Validate an enum\n   * @param data Data ta validate\n   * @param schema JSON schema describing the enum\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateEnum(data: unknown, schema: JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.enum) {\n      return true;\n    }\n\n    /* Cast as the data can be of multiple types, and so TypeScript is lost */\n    return ((schema.enum as unknown[]).includes(data));\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError, of, OperatorFunction, ReplaySubject } from 'rxjs';\nimport { mergeMap, catchError, tap } from 'rxjs/operators';\n\nimport { ValidationError } from './exceptions';\nimport {\n  JSONSchema, JSONSchemaBoolean, JSONSchemaInteger,\n  JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf, JSONValidator\n} from '../validation';\nimport { LocalDatabase, IDB_BROKEN_ERROR, LocalStorageDatabase, IndexedDBDatabase, MemoryDatabase } from '../databases';\nimport { LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageMap {\n\n  protected notifiers = new Map<string, ReplaySubject<unknown>>();\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param database Storage to use\n   * @param jsonValidator Validator service\n   * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    protected database: LocalDatabase,\n    protected jsonValidator: JSONValidator = new JSONValidator(),\n    @Inject(LS_PREFIX) protected LSPrefix = '',\n  ) {}\n\n  /**\n   * **Number of items** in storage, wrapped in an `Observable`.\n   *\n   * @example\n   * this.storageMap.size.subscribe((size) => {\n   *   console.log(size);\n   * });\n   */\n  get size(): Observable<number> {\n\n    return this.database.size\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.size));\n\n  }\n\n  /**\n   * Tells you which storage engine is used. *Only useful for interoperability.*\n   * Note that due to some browsers issues in some special contexts\n   * (Firefox private mode and Safari cross-origin iframes),\n   * **this information may be wrong at initialization,**\n   * as the storage could fallback from `indexedDB` to `localStorage`\n   * only after a first read or write operation.\n   * @returns Storage engine used\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {}\n   */\n  get backingEngine(): 'indexedDB' | 'localStorage' | 'memory' | 'unknown' {\n\n    if (this.database instanceof IndexedDBDatabase) {\n\n      return 'indexedDB';\n\n    } else if (this.database instanceof LocalStorageDatabase) {\n\n      return 'localStorage';\n\n    } else if (this.database instanceof MemoryDatabase) {\n\n      return 'memory';\n\n    } else {\n\n      return 'unknown';\n\n    }\n\n  }\n\n  /**\n   * Info about `indexedDB` database. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version.\n   * **Values will be empty if the storage is not `indexedDB`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {\n   *   const { database, store, version } = this.storageMap.backingStore;\n   * }\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return (this.database instanceof IndexedDBDatabase) ?\n      this.database.backingStore :\n      { database: '', store: '', version: 0 };\n\n  }\n\n  /**\n   * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n   * @returns `localStorage` prefix.\n   * **Values will be empty if the storage is not `localStorage`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'localStorage') {\n   *   const { prefix } = this.storageMap.fallbackBackingStore;\n   * }\n   */\n  get fallbackBackingStore(): { prefix: string } {\n\n    return (this.database instanceof LocalStorageDatabase) ?\n      { prefix: this.database.prefix } :\n      { prefix: '' };\n\n  }\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or undefined\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.storageMap.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  get<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  get<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | undefined>;\n  get<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  get<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  get<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | undefined>;\n  get<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  get<T = unknown>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown> {\n\n    /* Get the data in storage */\n    return this.database.get<T>(key).pipe(\n      /* Check if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.get<T>(key)),\n      mergeMap((data) => {\n\n        /* No need to validate if the data is empty */\n        if ((data === undefined) || (data === null)) {\n\n          return of(undefined);\n\n        } else if (schema) {\n\n          /* Validate data against a JSON schema if provided */\n          if (!this.jsonValidator.validate(data, schema)) {\n            return throwError(new ValidationError());\n          }\n\n          /* Data have been checked, so it's OK to cast */\n          return of(data as T | undefined);\n\n        }\n\n        /* Cast to unknown as the data wasn't checked */\n        return of(data as unknown);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.set('key', 'value').subscribe(() => {});\n   */\n  set(key: string, data: unknown, schema?: JSONSchema): Observable<undefined> {\n\n    /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,\n     * so removing item instead for all storages to have a consistent API */\n    if ((data === undefined) || (data === null)) {\n      return this.delete(key);\n    }\n\n    /* Validate data against a JSON schema if provided */\n    if (schema && !this.jsonValidator.validate(data, schema)) {\n      return throwError(new ValidationError());\n    }\n\n    return this.database.set(key, data).pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.set(key, data)),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => { this.notify(key, data); }),\n    );\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.delete('key').subscribe(() => {});\n   */\n  delete(key: string): Observable<undefined> {\n\n    return this.database.delete(key).pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.delete(key)),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => { this.notify(key, undefined); }),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.clear().subscribe(() => {});\n   */\n  clear(): Observable<undefined> {\n\n    return this.database.clear().pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.clear()),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => {\n        for (const key of this.notifiers.keys()) {\n          this.notify(key, undefined);\n        }\n      }),\n    );\n\n  }\n\n  /**\n   * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n   * * if there is no key, the `next` callback will not be invoked,\n   * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n   * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.keys().subscribe({\n   *   next: (key) => { console.log(key); },\n   *   complete: () => { console.log('Done'); },\n   * });\n   */\n  keys(): Observable<string> {\n\n    return this.database.keys()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.keys()));\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   *\n   * @example\n   * this.storageMap.has('key').subscribe((hasKey) => {\n   *   if (hasKey) {}\n   * });\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.database.has(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.has(key)));\n\n  }\n\n  /**\n   * Watch an item value in storage.\n   * **Note only changes done via this lib will be watched**, external changes in storage can't be detected.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md\n   * @param key The item's key to watch\n   * @param schema Optional JSON schema to validate the initial value\n   * @returns An infinite `Observable` giving the current value\n   */\n  watch<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  watch<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | undefined>;\n  watch<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  watch<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  watch<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | undefined>;\n  watch<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  watch<T = unknown>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  watch<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  watch<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown> {\n\n    /* Check if there is already a notifier and cast according to schema */\n    let notifier = this.notifiers.get(key) as ReplaySubject<typeof schema extends JSONSchema ? (T | undefined) : unknown>;\n\n    if (!notifier) {\n\n      /* Create a notifier and cast according to schema */\n      notifier = new ReplaySubject<typeof schema extends JSONSchema ? (T | undefined) : unknown>(1);\n\n      /* Memorize the notifier */\n      this.notifiers.set(key, notifier);\n\n      /* Get the current item value */\n      this.get<T>(key, schema).subscribe({\n        next: (result) => notifier.next(result),\n        error: (error) => notifier.error(error),\n      });\n\n    }\n\n    /* Only the public API of the `Observable` should be returned */\n    return notifier.asObservable();\n\n  }\n\n  /**\n   * Notify when a value changes\n   * @param key The item's key\n   * @param data The new value\n   */\n  protected notify(key: string, value: unknown): void {\n\n    const notifier = this.notifiers.get(key);\n\n    if (notifier) {\n      notifier.next(value);\n    }\n\n  }\n\n  /**\n   * RxJS operator to catch if `indexedDB` is broken\n   * @param operationCallback Callback with the operation to redo\n   */\n  protected catchIDBBroken<T>(operationCallback: () => Observable<T>): OperatorFunction<T, T> {\n\n    return catchError((error) => {\n\n      /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */\n      if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {\n\n        /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n         * just trying to check `localStorage` variable causes a security exception.\n         * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n         */\n        try {\n\n          if ('getItem' in localStorage) {\n\n            /* Fallback to `localStorage` if available */\n            this.database = new LocalStorageDatabase(this.LSPrefix);\n\n          } else {\n\n            /* Fallback to memory storage otherwise */\n            this.database = new MemoryDatabase();\n\n          }\n\n        } catch {\n\n          /* Fallback to memory storage otherwise */\n          this.database = new MemoryDatabase();\n\n        }\n\n        /* Redo the operation */\n        return operationCallback();\n\n      } else {\n\n        /* Otherwise, rethrow the error */\n        return throwError(error);\n\n      }\n\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mapTo, map } from 'rxjs/operators';\n\nimport { StorageMap } from './storage-map.service';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  /**\n   * Number of items in storage wrapped in an `Observable`\n   *\n   * @example\n   * this.localStorage.length.subscribe((length) => {\n   *   console.log(length);\n   * });\n   */\n  get length(): Observable<number> {\n\n    return this.storageMap.size;\n\n  }\n\n  /* Use the `StorageMap` service to avoid code duplication */\n  constructor(protected storageMap: StorageMap) {}\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data.\n   * **Note you must pass the schema directly as the second argument.**\n   * **Passing the schema in an object `{ schema }` is deprecated and only here**\n   * **for backward compatibility: it will be removed in a future version.**\n   * @returns The item's value if the key exists, `null` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.localStorage.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or null\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.localStorage.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  getItem<T = string>(key: string, schema: JSONSchemaString): Observable<string | null>;\n  getItem<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | null>;\n  getItem<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | null>;\n  getItem<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | null>;\n  getItem<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | null>;\n  getItem<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | null>;\n  getItem<T = unknown>(key: string, schema: JSONSchema | { schema: JSONSchema }): Observable<T | null>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema | { schema: JSONSchema } | undefined): Observable<unknown> {\n\n    if (schema) {\n\n      /* Backward compatibility with version <= 7 */\n      const schemaFinal: JSONSchema = ('schema' in schema) ? schema.schema : schema;\n\n      return this.storageMap.get<T>(key, schemaFinal).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    } else {\n\n      return this.storageMap.get(key).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    }\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.set('key', 'value').subscribe(() => {});\n   */\n  setItem(key: string, data: unknown, schema?: JSONSchema): Observable<boolean> {\n\n    return this.storageMap.set(key, data, schema).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.delete('key').subscribe(() => {});\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    return this.storageMap.delete(key).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.clear().subscribe(() => {});\n   */\n  clear(): Observable<boolean> {\n\n    return this.storageMap.clear().pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LS_PREFIX, IDB_DB_NAME, IDB_STORE_NAME, IDB_DB_VERSION, IDB_NO_WRAP, StorageConfig } from './tokens';\n\n/**\n * This module does not contain anything, it's only useful to provide options via `.forRoot()`.\n */\n@NgModule()\nexport class StorageModule {\n\n  /**\n   * Only useful to provide options, otherwise it does nothing.\n   * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**\n   *\n   * @example\n   * NgModule({\n   *   imports: [StorageModule.forRoot({\n   *     LSPrefix: 'custom_',\n   *   })]\n   * })\n   * export class AppModule\n   */\n  static forRoot(config: StorageConfig): ModuleWithProviders<StorageModule> {\n    return {\n      ngModule: StorageModule,\n      providers: [\n        config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],\n        config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],\n        config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],\n        config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],\n        (config.IDBNoWrap === false) ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],\n      ],\n    };\n  }\n\n}\n"]}