{"version":3,"file":"ngx-pwa-local-storage.js","sources":["ng://@ngx-pwa/local-storage/lib/databases/exceptions.ts","ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/memory-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","ng://@ngx-pwa/local-storage/lib/storages/exceptions.ts","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/storages/storage-map.service.ts","ng://@ngx-pwa/local-storage/lib/storages/local-storage.service.ts","ng://@ngx-pwa/local-storage/lib/storage.module.ts","ng://@ngx-pwa/local-storage/public_api.ts","ng://@ngx-pwa/local-storage/ngx-pwa-local-storage.ts"],"sourcesContent":["/**\n * Exception message when `indexedDB` is not working\n */\nexport const IDB_BROKEN_ERROR = 'indexedDB is not working';\n\n/**\n * Exception raised when `indexedDB` is not working\n */\nexport class IDBBrokenError extends Error {\n  message = IDB_BROKEN_ERROR;\n}\n\n/**\n * Exception message when a value can't be serialized for `localStorage`\n */\nexport const SERIALIZATION_ERROR = `The storage is currently localStorage,\nwhere data must be serialized, and the provided data can't be serialized.`;\n\n/**\n * Exception raised when a value can't be serialized for `localStorage`\n */\nexport class SerializationError extends Error {\n  message = SERIALIZATION_ERROR;\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Token to provide a prefix to `localStorage` keys.\n */\nexport const LS_PREFIX = new InjectionToken<string>('localStoragePrefix', {\n  providedIn: 'root',\n  factory: () => ''\n});\n\n/**\n * Default name used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_NAME = 'ngStorage';\n\n/**\n * Token to provide `indexedDB` database name.\n */\nexport const IDB_DB_NAME = new InjectionToken<string>('localStorageIDBDBName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_NAME\n});\n\n/**\n * Default version used for `indexedDB` database.\n */\nexport const DEFAULT_IDB_DB_VERSION = 1;\n\n/**\n * Token to provide `indexedDB` database version.\n * Must be an unsigned **integer**.\n */\nexport const IDB_DB_VERSION = new InjectionToken<number>('localStorageIDBDBVersion', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_DB_VERSION\n});\n\n/**\n * Default name used for `indexedDB` object store.\n */\nexport const DEFAULT_IDB_STORE_NAME = 'localStorage';\n\n/**\n * Token to provide `indexedDB` store name.\n * For backward compatibility, the default can't be set now, `IndexedDBDatabase` will do it at runtime.\n */\nexport const IDB_STORE_NAME = new InjectionToken<string>('localStorageIDBStoreName', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_STORE_NAME\n});\n\n/**\n * Default value for interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n */\nexport const DEFAULT_IDB_NO_WRAP = true;\n\n/**\n * Token to allow interoperability with native `indexedDB` and other storage libs,\n * by changing how values are stored in `indexedDB` database.\n * Defaults to `true`. Change to `false` for backward compatiblity in existing applications.\n * **DO NOT CHANGE THIS BEHAVIOR ONCE IN PRODUCTION**, as it would break with existing data.\n */\nexport const IDB_NO_WRAP = new InjectionToken<boolean>('localStorageIDBWrap', {\n  providedIn: 'root',\n  factory: () => DEFAULT_IDB_NO_WRAP\n});\n\nexport interface StorageConfig {\n\n  /**\n   * Allows to add a prefix before `localStorage` keys.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  LSPrefix?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` database.\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBName?: string;\n\n  /**\n   * Allows to change the name used for `indexedDB` object store.\n   * *Use only* for interoperability with other APIs.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBStoreName?: string;\n\n  /**\n   * Allows to change the database version used for `indexedDB` database.\n   * Must be an unsigned **integer**.\n   * **Use with caution as the creation of the store depends on the version.**\n   * *Use only* for interoperability with other APIs or to avoid collision for multiple apps on the same subdomain.\n   * **WARNING: do not change this option in an app already deployed in production, as previously stored data would be lost.**\n   */\n  IDBDBVersion?: number;\n\n  /**\n   * Allows interoperability with native `indexedDB` and other storage libs,\n   * by changing how values are stored in `indexedDB` database.\n   * Defaults to `true`. Change to `false` for backward compatiblity in existing applications.\n   * **DO NOT CHANGE THIS BEHAVIOR ONCE IN PRODUCTION**, as it would break with existing data.\n   */\n  IDBNoWrap?: boolean;\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first, takeWhile, tap, mapTo } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { IDBBrokenError } from './exceptions';\nimport {\n  IDB_DB_NAME, IDB_STORE_NAME, DEFAULT_IDB_STORE_NAME, IDB_DB_VERSION,\n  DEFAULT_IDB_DB_NAME, DEFAULT_IDB_DB_VERSION, IDB_NO_WRAP, DEFAULT_IDB_NO_WRAP\n} from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * `indexedDB` database name\n   */\n  protected readonly dbName: string;\n\n  /**\n   * `indexedDB` object store name\n   */\n  protected readonly storeName: string;\n\n  /**\n   * `indexedDB` database version. Must be an unsigned **integer**\n   */\n  protected readonly dbVersion: number;\n\n  /**\n   * `indexedDB` database connection, wrapped in a RxJS `ReplaySubject` to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected readonly database = new ReplaySubject<IDBDatabase>(1);\n\n  /**\n   * Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility.\n   */\n  protected readonly noWrap: boolean;\n\n  /**\n   * Index used when wrapping value. *For backward compatibility only.*\n   */\n  protected readonly wrapIndex = 'value';\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param dbName `indexedDB` database name\n   * @param storeName `indexedDB` store name\n   * @param dbVersion `indexedDB` database version\n   * @param noWrap Flag to not wrap `indexedDB` values for interoperability or to wrap for backward compatibility\n   */\n  constructor(\n    @Inject(IDB_DB_NAME) dbName = DEFAULT_IDB_DB_NAME,\n    @Inject(IDB_STORE_NAME) storeName = DEFAULT_IDB_STORE_NAME,\n    @Inject(IDB_DB_VERSION) dbVersion = DEFAULT_IDB_DB_VERSION,\n    @Inject(IDB_NO_WRAP) noWrap = DEFAULT_IDB_NO_WRAP,\n  ) {\n\n    this.dbName = dbName;\n    this.storeName = storeName;\n    this.dbVersion = dbVersion;\n    this.noWrap = noWrap;\n\n    /* Connect to `indexedDB`, with prefix if provided by the user */\n    this.connect();\n\n  }\n\n  /**\n   * Information about `indexedDB` connection. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return {\n      database: this.dbName,\n      store: this.storeName,\n      version: this.dbVersion,\n    };\n\n  }\n\n  /**\n   * Number of items in our `indexedDB` database and object store\n   */\n  get size(): Observable<number> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Request to know the number of items */\n        const request = store.count();\n\n        /* Return the result */\n        return events.pipe(map(() => request.result));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Gets an item value in our `indexedDB` store\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in an RxJS `Observable`\n   */\n  get<T = unknown>(key: string): Observable<TÂ | undefined> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Request the value with the key provided by the user */\n        const request = store.get(key);\n\n        /* Listen events and return the result */\n        return events.pipe(map(() => {\n\n          if ((request.result !== undefined) && (request.result !== null)) {\n\n            /* Prior to v8, the value was wrapped in an `{ value: ...}` object */\n            if (!this.noWrap && (typeof request.result === 'object') && (this.wrapIndex in request.result) &&\n            (request.result[this.wrapIndex] !== undefined) && (request.result[this.wrapIndex] !== null)) {\n\n              return (request.result[this.wrapIndex] as T);\n\n            } else {\n\n              /* Cast to the wanted type */\n              return request.result as T;\n\n            }\n\n          }\n\n          /* Return `undefined` if the value is empty */\n          return undefined;\n\n        }));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Sets an item in our `indexedDB` store\n   * @param key The item's key\n   * @param data The item's value\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: unknown): Observable<undefined> {\n\n    /* Storing `undefined` in `indexedDb` can cause issues in some browsers so removing item instead */\n    if (data === undefined) {\n      return this.delete(key);\n    }\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Prior to v8, data was wrapped in a `{ value: ... }` object */\n        const dataToStore = this.noWrap ? data : { [this.wrapIndex]: data };\n\n        /* Add if the item is not existing yet, or update otherwise */\n        store.put(dataToStore, key);\n\n        /* Listen to events and return `undefined` as no value is expected */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes an item in our `indexedDB` store\n   * @param key The item's key\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Delete the item in store */\n        store.delete(key);\n\n        /* Listen to events and return `undefined` as no data is expected here */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete after the first value */\n      first(),\n    );\n\n  }\n\n  /**\n   * Deletes all items from our `indexedDB` objet store\n   * @returns An RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    /* Open a transaction in write mode */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Delete all items in object store */\n        store.clear();\n\n        /* Listen to events and return `undefined` as no data is expected here */\n        return events.pipe(mapTo(undefined));\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Get all the keys in our `indexedDB` store\n   * @returns An RxJS `Observable` iterating on each key\n   */\n  keys(): Observable<string> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      /* `first()` is used as the final operator in other methods to complete the `Observable`\n       * (as it all starts from a `ReplaySubject` which never ends),\n       * but as this method is iterating over multiple values, `first()` **must** be used here */\n      first(),\n      mergeMap((transactionData) => {\n\n        const { store } = transactionData;\n\n        /* Open a cursor on the store\n         * `.openKeyCursor()` is better for performance, but only available in indexedDB v2 (missing in IE/Edge)\n         * Avoid issues like https://github.com/cyrilletuzi/angular-async-local-storage/issues/69 */\n        const request = ('openKeyCursor' in store) ? store.openKeyCursor() : (store as IDBObjectStore).openCursor();\n\n        /* Listen to success event */\n        const success$ = fromEvent(request, 'success').pipe(\n          /* Stop the `Observable` when the cursor is `null` */\n          takeWhile(() => (request.result !== null)),\n          /* This lib only allows string keys, but user could have added other types of keys from outside\n           * It's OK to cast as the cursor as been tested in the previous operator */\n          map(() => (request.result as IDBCursor).key.toString()),\n          /* Iterate on the cursor */\n          tap(() => { (request.result as IDBCursor).continue(); }),\n        );\n\n        /* Listen to error event and if so, throw an error */\n        const error$ = this.listenError(request);\n\n        /* Choose the first event to occur */\n        return race([success$, error$]);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in our `indexedDB` store\n   * @returns An RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Open a transaction in read-only mode */\n    return this.transaction('readonly').pipe(\n      mergeMap((transactionData) => {\n\n        const { store, events } = transactionData;\n\n        /* Check if the key exists in the store\n         * `getKey()` is better but only available in `indexedDB` v2 (Chrome >= 58, missing in IE/Edge).\n         * In older browsers, the value is checked instead, but it could lead to an exception\n         * if `undefined` was stored outside of this lib (e.g. directly with the native `indexedDB` API).\n         * Fixes https://github.com/cyrilletuzi/angular-async-local-storage/issues/69\n         */\n        const request =  ('getKey' in store) ? store.getKey(key) : (store as IDBObjectStore).get(key);\n\n        /* Listen to events and return `true` or `false` */\n        return events.pipe(map(() => (request.result !== undefined) ? true : false));\n\n      }),\n      /* The observable will complete */\n      first(),\n    );\n\n  }\n\n  /**\n   * Connects to `indexedDB` and creates the object store on first time\n   */\n  protected connect(): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connect to `indexedDB`\n     * Will fail in Safari cross-origin iframes\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42} */\n    try {\n\n      /* Do NOT explicit `window` here, as `indexedDB` could be used from a web worker too */\n      request = indexedDB.open(this.dbName, this.dbVersion);\n\n    }Â catch {\n\n      this.database.error(new IDBBrokenError());\n\n      return;\n\n    }\n\n    /* Create store on first connection */\n    this.createStore(request);\n\n    /* Listen to success and error events */\n    const success$ = fromEvent(request, 'success');\n    const error$ = this.listenError(request);\n\n    /* Choose the first to occur */\n    race([success$, error$])\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n          /* Register the database connection in the `ReplaySubject` for further access */\n          this.database.next(request.result);\n        },\n        error: () => {\n          /* Firefox private mode issue: fallback storage if IndexedDb connection is failing\n          * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n          * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/26} */\n          this.database.error(new IDBBrokenError());\n        },\n      });\n\n  }\n\n  /**\n   * Create store on first use of `indexedDB`\n   * @param request `indexedDB` database opening request\n   */\n  protected createStore(request: IDBOpenDBRequest): void {\n\n    /* Listen to the event fired on first connection */\n    fromEvent(request, 'upgradeneeded')\n      /* The observable will complete */\n      .pipe(first())\n      .subscribe({\n        next: () => {\n\n          /* Check if the store already exists, to avoid error */\n          if (!request.result.objectStoreNames.contains(this.storeName)) {\n\n            /* Create the object store */\n            request.result.createObjectStore(this.storeName);\n\n          }\n\n        }\n      });\n\n  }\n\n  /**\n   * Open an `indexedDB` transaction and get our store\n   * @param mode `readonly` or `readwrite`\n   * @returns An `indexedDB` transaction store and events, wrapped in an RxJS `Observable`\n   */\n  protected transaction(mode: IDBTransactionMode): Observable<{\n    store: IDBObjectStore;\n    events: Observable<Event>;\n  }> {\n\n    /* From the `indexedDB` connection, open a transaction and get the store */\n    return this.database\n      .pipe(mergeMap((database) => {\n\n        let transaction: IDBTransaction;\n\n        try {\n\n          transaction = database.transaction([this.storeName], mode);\n\n        } catch (error) {\n\n            /* The store could have been deleted from outside */\n            return throwError(error as DOMException);\n\n        }\n\n        /* Get the store from the transaction */\n        const store = transaction.objectStore(this.storeName);\n\n        /* Listen transaction `complete` and `error` events */\n        const events = this.listenTransactionEvents(transaction);\n\n        return of({ store, events });\n\n      }));\n\n  }\n\n  /**\n   * Listen errors on a transaction or request, and throw if trigerred\n   * @param transactionOrRequest `indexedDb` transaction or request to listen\n   * @returns An `Observable` listening to errors\n   */\n  protected listenError(transactionOrRequest: IDBTransaction | IDBRequest): Observable<never> {\n\n    return fromEvent(transactionOrRequest, 'error').pipe(\n      /* Throw on error to be able to catch errors in RxJS way */\n      mergeMap(() => throwError(transactionOrRequest.error)),\n    );\n\n  }\n\n  /**\n   * Listen transaction `complete` and `error` events\n   * @param transaction Transaction to listen\n   * @returns An `Observable` listening to transaction `complete` and `error` events\n   */\n  protected listenTransactionEvents(transaction: IDBTransaction): Observable<Event> {\n\n    /* Listen to the `complete` event */\n    const complete$ = fromEvent(transaction, 'complete');\n\n    /* Listen to the `error` event */\n    const error$ = this.listenError(transaction);\n\n    /* Choose the first event to occur */\n    return race([complete$, error$]);\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, of, throwError, asyncScheduler } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { SerializationError } from './exceptions';\nimport { LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /**\n   * Optional user prefix to avoid collision for multiple apps on the same subdomain\n   */\n  readonly prefix: string;\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param prefix Prefix option to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    @Inject(LS_PREFIX) prefix = '',\n  ) {\n\n    /* Prefix if asked, or no prefix otherwise */\n    this.prefix = prefix || '';\n\n  }\n\n  /**\n   * Number of items in `localStorage`\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(localStorage.length);\n\n  }\n\n  /**\n   * Gets an item value in `localStorage`\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n  get<T = unknown>(key: string): Observable<T | undefined> {\n\n    /* Get raw data */\n    const unparsedData = localStorage.getItem(this.prefixKey(key));\n\n    let parsedData: T | undefined;\n\n    /* No need to parse if data is `null` or `undefined` */\n    if ((unparsedData !== undefined) && (unparsedData !== null)) {\n\n      /* Try to parse */\n      try {\n        parsedData = JSON.parse(unparsedData) as T;\n      } catch (error) {\n        return throwError(error as SyntaxError);\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(parsedData);\n\n  }\n\n  /**\n   * Store an item in `localStorage`\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  set(key: string, data: unknown): Observable<undefined> {\n\n    let serializedData: string | null = null;\n\n    /* Check if data can be serialized */\n    const dataPrototype = Object.getPrototypeOf(data);\n    if ((typeof data === 'object') && (data !== null) && !Array.isArray(data) &&\n    !((dataPrototype === Object.prototype) || (dataPrototype === null))) {\n      return throwError(new SerializationError());\n    }\n\n    /* Try to stringify (can fail on circular references) */\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return throwError(error as TypeError);\n    }\n\n    /* Can fail if storage quota is exceeded */\n    try {\n      localStorage.setItem(this.prefixKey(key), serializedData);\n    } catch (error) {\n      return throwError(error as DOMException);\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  delete(key: string): Observable<undefined> {\n\n    localStorage.removeItem(this.prefixKey(key));\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in `localStorage`\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n  clear(): Observable<undefined> {\n\n    localStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in `localStorage`\n   * Note the order of the keys may be inconsistent in Firefox\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return new Observable<string>((subscriber) => {\n\n      /* Iteretate over all the indexes */\n      for (let index = 0; index < localStorage.length; index += 1) {\n\n        /* Cast as we are sure in this case the key is not `null` */\n        subscriber.next(this.getUnprefixedKey(index) as string);\n\n      }\n\n      subscriber.complete();\n\n    }).pipe(\n      /* Required to work like other databases which are asynchronous */\n      observeOn(asyncScheduler),\n    );\n\n  }\n\n  /**\n   * Check if a key exists in `localStorage`\n   * @param key The item's key\n   * @returns A RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* ItÃ©rate over all indexes in storage */\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      if (key === this.getUnprefixedKey(index))Â {\n\n        /* Wrap in a RxJS `Observable` to be consistent with other storages */\n        return of(true);\n\n      }\n\n    }\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(false);\n\n  }\n\n  /**\n   * Get an unprefixed key\n   * @param index Index of the key\n   * @returns The unprefixed key name if exists, `null` otherwise\n   */\n  protected getUnprefixedKey(index: number): string | null {\n\n    /* Get the key in storage: may have a prefix */\n    const prefixedKey = localStorage.key(index);\n\n    if (prefixedKey !== null) {\n\n      /* If no prefix, the key is already good, otherwrite strip the prefix */\n      return !this.prefix ? prefixedKey : prefixedKey.substr(this.prefix.length);\n\n    }\n\n    return null;\n\n  }\n\n  /**\n   * Add the prefix to a key\n   * @param key The key name\n   * @returns The prefixed key name\n   */\n  protected prefixKey(key: string): string {\n\n    return `${this.prefix}${key}`;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemoryDatabase implements LocalDatabase {\n\n  /**\n   * Memory storage\n   */\n  protected memoryStorage = new Map<string, unknown>();\n\n  /**\n   * Number of items in memory\n   */\n  get size(): Observable<number> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.size);\n\n  }\n\n  /**\n   * Gets an item value in memory\n   * @param key The item's key\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   */\n   get<T = unknown>(key: string): Observable<T | undefined> {\n\n    const rawData = this.memoryStorage.get(key) as T | undefined;\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(rawData);\n\n  }\n\n  /**\n   * Sets an item in memory\n   * @param key The item's key\n   * @param data The item's value\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   set(key: string, data: unknown): Observable<undefined> {\n\n    this.memoryStorage.set(key, data);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes an item in memory\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   delete(key: string): Observable<undefined> {\n\n    this.memoryStorage.delete(key);\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Deletes all items in memory\n   * @returns A RxJS `Observable` to wait the end of the operation\n   */\n   clear(): Observable<undefined> {\n\n    this.memoryStorage.clear();\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(undefined);\n\n  }\n\n  /**\n   * Get all keys in memory\n   * @returns A RxJS `Observable` iterating on keys\n   */\n  keys(): Observable<string> {\n\n    /* Create an `Observable` from keys */\n    return from(this.memoryStorage.keys());\n\n  }\n\n  /**\n   * Check if a key exists in memory\n   * @param key Key name\n   * @returns a RxJS `Observable` telling if the key exists or not\n   */\n  has(key: string): Observable<boolean> {\n\n    /* Wrap in a RxJS `Observable` to be consistent with other storages */\n    return of(this.memoryStorage.has(key));\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MemoryDatabase } from './memory-database';\nimport { IDB_STORE_NAME, IDB_DB_NAME, LS_PREFIX, IDB_DB_VERSION, IDB_NO_WRAP } from '../tokens';\n\n/**\n * Factory to create a storage according to browser support\n * @param platformId Context about the platform (`browser`, `server`...)\n * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain\n * @param IDBDBName `indexedDB` database name\n * @param IDBstoreName `indexedDB` storeName name\n * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/BROWSERS_SUPPORT.md}\n */\nexport function localDatabaseFactory(\n  platformId: string, LSPrefix: string, IDBDBName: string, IDBStoreName: string,\n  IDBDBVersion: number, IDBNoWrap: boolean): LocalDatabase {\n\n  /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n   * just trying to check `indexedDB` or `localStorage` variables causes a security exception.\n   * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n   */\n  try {\n\n    // Do not explicit `window` here, as the global object is not the same in web workers\n    if (isPlatformBrowser(platformId) && (indexedDB !== undefined) && (indexedDB !== null) && ('open' in indexedDB)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `indexedDB` exists (issue: IE9)\n      * - it could exist but be `undefined` or `null` (issue: IE / Edge private mode)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE10+ and all other browsers in normal mode\n      * - Chromium / Safari private mode, but in this case, data will be swiped when the user leaves the app */\n      return new IndexedDBDatabase(IDBDBName, IDBStoreName, IDBDBVersion, IDBNoWrap);\n\n    } else if (isPlatformBrowser(platformId)\n    && (localStorage !== undefined) && (localStorage !== null) && ('getItem' in localStorage)) {\n\n      /* Check:\n      * - if we are in a browser context (issue: server-side rendering)\n      * - if `localStorage` exists (to be sure)\n      * - it could exists but not having a working API\n      * Will be the case for:\n      * - IE9\n      * - Safari cross-origin iframes, detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/issues/42}\n      * - IE / Edge / Firefox private mode, but in this case, data will be swiped when the user leaves the app\n      * For Firefox, can only be detected later in `IndexedDBDatabase.connect()`\n      * @see {@link https://bugzilla.mozilla.org/show_bug.cgi?id=781982}\n      */\n      return new LocalStorageDatabase(LSPrefix);\n\n    }\n\n  } catch {}\n\n  /* Will be the case for:\n   * - In browsers if storage has been fully disabled (via the \"Block all cookies\" option)\n   * - Server-side rendering\n   * - All other non-browser context\n   */\n  return new MemoryDatabase();\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    LS_PREFIX,\n    IDB_DB_NAME,\n    IDB_STORE_NAME,\n    IDB_DB_VERSION,\n    IDB_NO_WRAP,\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract readonly size: Observable<number>;\n\n  abstract get<T = unknown>(key: string): Observable<T | undefined>;\n  abstract set(key: string, data: unknown): Observable<undefined>;\n  abstract delete(key: string): Observable<undefined>;\n  abstract clear(): Observable<undefined>;\n  abstract keys(): Observable<string>;\n  abstract has(key: string): Observable<boolean>;\n\n}\n","/**\n * Exception message when a value is not valid against the JSON schema\n */\nexport const VALIDATION_ERROR = `Data stored is not valid against the provided JSON schema.\nCheck your JSON schema, otherwise it means data has been corrupted.`;\n\n/**\n * Exception raised when a value is not valid against the JSON schema\n */\nexport class ValidationError extends Error {\n  message = VALIDATION_ERROR;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  JSONSchema, JSONSchemaString, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaBoolean,\n  JSONSchemaArray, JSONSchemaObject\n} from './json-schema';\n\n// TODO: detailed error messages?\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a Jsubset of the JSON Schema standard.\n   * Types are enforced to validate everything: each schema must\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema. Must have a `type`.\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   */\n  validate(data: unknown, schema: JSONSchema): boolean {\n\n    switch (schema.type) {\n\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return this.validateBoolean(data, schema);\n      case 'array':\n        return this.validateArray(data, schema);\n      case 'object':\n        return this.validateObject(data, schema);\n\n    }\n\n  }\n\n  /**\n   * Validate a string\n   * @param data Data to validate\n   * @param schema Schema describing the string\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateString(data: unknown, schema: JSONSchemaString): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if ((schema.maxLength !== undefined) && (data.length > schema.maxLength)) {\n      return false;\n    }\n\n    if ((schema.minLength !== undefined) && (data.length < schema.minLength)) {\n      return false;\n    }\n\n    if (schema.pattern) {\n\n      let regularExpression: RegExp | null = null;\n\n      try {\n        regularExpression = new RegExp(schema.pattern);\n      } catch {}\n\n      if (regularExpression && !regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a number or an integer\n   * @param data Data to validate\n   * @param schema Schema describing the number or integer\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateNumber(data: unknown, schema: JSONSchemaNumber |Â JSONSchemaInteger): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    /* Test is done this way to not divide by 0 */\n    if (schema.multipleOf && !Number.isInteger(data / schema.multipleOf)) {\n      return false;\n    }\n\n    if ((schema.maximum !== undefined) && (data > schema.maximum)) {\n        return false;\n    }\n\n    if ((schema.exclusiveMaximum !== undefined) && (data >= schema.exclusiveMaximum)) {\n      return false;\n\n    }\n\n    if ((schema.minimum !== undefined) && (data < schema.minimum)) {\n      return false;\n\n    }\n\n    if ((schema.exclusiveMinimum !== undefined) && (data <= schema.exclusiveMinimum)) {\n        return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a boolean\n   * @param data Data to validate\n   * @param schema Schema describing the boolean\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateBoolean(data: unknown, schema: JSONSchemaBoolean): boolean {\n\n    if (typeof data !== 'boolean') {\n      return false;\n    }\n\n    if (!this.validateConst(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an array\n   * @param data Data to validate\n   * @param schema Schema describing the array\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateArray(data: unknown, schema: JSONSchemaArray): boolean {\n\n    if (!Array.isArray(data)) {\n      return false;\n    }\n\n    if ((schema.maxItems !== undefined) && (data.length > schema.maxItems)) {\n      return false;\n    }\n\n    if ((schema.minItems !== undefined) && (data.length < schema.minItems)) {\n      return false;\n    }\n\n    if (schema.uniqueItems) {\n\n      /* Create a set to eliminate values with multiple occurences */\n      const dataSet = new Set(data);\n\n      if (data.length !== dataSet.size) {\n        return false;\n      }\n\n    }\n\n    /* Specific test for tuples */\n    if (Array.isArray(schema.items)) {\n\n      return this.validateTuple(data, schema.items);\n\n    }\n\n    /* Validate all the values in array */\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a tuple (array with fixed length and multiple types)\n   * @param data Data to validate\n   * @param schemas Schemas describing the tuple\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateTuple(data: unknown[], schemas: JSONSchema[]): boolean {\n\n    /* Tuples have a fixed length */\n    if (data.length !== schemas.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < schemas.length; i += 1) {\n\n      if (!this.validate(data[i], schemas[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate an object\n   * @param data Data to validate\n   * @param schema JSON schema describing the object\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateObject(data: unknown, schema: JSONSchemaObject): boolean {\n\n    /* Check the type and if not `null` as `null` also have the type `object` in old browsers */\n    if ((typeof data !== 'object') || (data === null)) {\n      return false;\n    }\n\n    /* Check if the object doesn't have more properties than expected\n     * Equivalent of `additionalProperties: false`\n     */\n    if (Object.keys(schema.properties).length < Object.keys(data).length) {\n      return false;\n    }\n\n    /* Validate required properties */\n    if (schema.required) {\n\n      for (const requiredProp of schema.required) {\n\n        if (!data.hasOwnProperty(requiredProp)) {\n          return false;\n        }\n\n      }\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      /* Filter to keep only real properties (no internal JS stuff) and check if the data has the property too */\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate((data as { [k: string]: unknown; })[property], schema.properties[property])) {\n          return false;\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Validate a constant\n   * @param data Data ta validate\n   * @param schema JSON schema describing the constant\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateConst(data: unknown, schema: JSONSchemaBoolean | JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.const) {\n      return true;\n    }\n\n    return (data === schema.const);\n\n  }\n\n  /**\n   * Validate an enum\n   * @param data Data ta validate\n   * @param schema JSON schema describing the enum\n   * @returns If data is valid: `true`, if it is invalid: `false`\n   */\n  protected validateEnum(data: unknown, schema: JSONSchemaInteger | JSONSchemaNumber | JSONSchemaString): boolean {\n\n    if (!schema.enum) {\n      return true;\n    }\n\n    /* Cast as the data can be of multiple types, and so TypeScript is lost */\n    return ((schema.enum as unknown[]).includes(data));\n\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable, throwError, of, OperatorFunction, ReplaySubject } from 'rxjs';\nimport { mergeMap, catchError, tap } from 'rxjs/operators';\n\nimport { ValidationError } from './exceptions';\nimport {\n  JSONSchema, JSONSchemaBoolean, JSONSchemaInteger,\n  JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf, JSONValidator\n} from '../validation';\nimport { LocalDatabase, IDB_BROKEN_ERROR, LocalStorageDatabase, IndexedDBDatabase, MemoryDatabase } from '../databases';\nimport { LS_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageMap {\n\n  protected notifiers = new Map<string, ReplaySubject<unknown>>();\n\n  /**\n   * Constructor params are provided by Angular (but can also be passed manually in tests)\n   * @param database Storage to use\n   * @param jsonValidator Validator service\n   * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n   */\n  constructor(\n    protected database: LocalDatabase,\n    protected jsonValidator: JSONValidator = new JSONValidator(),\n    @Inject(LS_PREFIX) protected LSPrefix = '',\n  ) {}\n\n  /**\n   * **Number of items** in storage, wrapped in an `Observable`.\n   *\n   * @example\n   * this.storageMap.size.subscribe((size) => {\n   *   console.log(size);\n   * });\n   */\n  get size(): Observable<number> {\n\n    return this.database.size\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.size));\n\n  }\n\n  /**\n   * Tells you which storage engine is used. *Only useful for interoperability.*\n   * Note that due to some browsers issues in some special contexts\n   * (Firefox private mode and Safari cross-origin iframes),\n   * **this information may be wrong at initialization,**\n   * as the storage could fallback from `indexedDB` to `localStorage`\n   * only after a first read or write operation.\n   * @returns Storage engine used\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {}\n   */\n  get backingEngine(): 'indexedDB' | 'localStorage' |Â 'memory' | 'unknown' {\n\n    if (this.database instanceof IndexedDBDatabase) {\n\n      return 'indexedDB';\n\n    } else if (this.database instanceof LocalStorageDatabase) {\n\n      return 'localStorage';\n\n    } else if (this.database instanceof MemoryDatabase) {\n\n      return 'memory';\n\n    } else {\n\n      return 'unknown';\n\n    }\n\n  }\n\n  /**\n   * Info about `indexedDB` database. *Only useful for interoperability.*\n   * @returns `indexedDB` database name, store name and database version.\n   * **Values will be empty if the storage is not `indexedDB`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'indexedDB') {\n   *   const { database, store, version } = this.storageMap.backingStore;\n   * }\n   */\n  get backingStore(): { database: string, store: string, version: number } {\n\n    return (this.database instanceof IndexedDBDatabase) ?\n      this.database.backingStore :\n      { database: '', store: '', version: 0 };\n\n  }\n\n  /**\n   * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n   * @returns `localStorage` prefix.\n   * **Values will be empty if the storage is not `localStorage`,**\n   * **so it should be used after an engine check**.\n   *\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/INTEROPERABILITY.md}\n   *\n   * @example\n   * if (this.storageMap.backingEngine === 'localStorage') {\n   *   const { prefix } = this.storageMap.fallbackBackingStore;\n   * }\n   */\n  get fallbackBackingStore(): { prefix: string } {\n\n    return (this.database instanceof LocalStorageDatabase) ?\n      { prefix: this.database.prefix } :\n      { prefix: '' };\n\n  }\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data\n   * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or undefined\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.storageMap.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  get<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  get<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | undefined>;\n  get<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  get<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  get<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | undefined>;\n  get<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  get<T = unknown>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  get<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown> {\n\n    /* Get the data in storage */\n    return this.database.get<T>(key).pipe(\n      /* Check if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.get<T>(key)),\n      mergeMap((data) => {\n\n        /* No need to validate if the data is empty */\n        if ((data === undefined) || (data === null)) {\n\n          return of(undefined);\n\n        } else if (schema) {\n\n          /* Validate data against a JSON schema if provided */\n          if (!this.jsonValidator.validate(data, schema)) {\n            return throwError(new ValidationError());\n          }\n\n          /* Data have been checked, so it's OK to cast */\n          return of(data as T | undefined);\n\n        }\n\n        /* Cast to unknown as the data wasn't checked */\n        return of(data as unknown);\n\n      }),\n    );\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.set('key', 'value').subscribe(() => {});\n   */\n  set(key: string, data: unknown, schema?: JSONSchema): Observable<undefined> {\n\n    /* Storing `undefined` or `null` is useless and can cause issues in `indexedDb` in some browsers,\n     * so removing item instead for all storages to have a consistent API */\n    if ((data === undefined) || (data === null)) {\n      return this.delete(key);\n    }\n\n    /* Validate data against a JSON schema if provided */\n    if (schema && !this.jsonValidator.validate(data, schema)) {\n      return throwError(new ValidationError());\n    }\n\n    return this.database.set(key, data).pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.set(key, data)),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => { this.notify(key, data); }),\n    );\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.delete('key').subscribe(() => {});\n   */\n  delete(key: string): Observable<undefined> {\n\n    return this.database.delete(key).pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.delete(key)),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => { this.notify(key, undefined); }),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.storageMap.clear().subscribe(() => {});\n   */\n  clear(): Observable<undefined> {\n\n    return this.database.clear().pipe(\n      /* Catch if `indexedDb` is broken */\n      this.catchIDBBroken(() => this.database.clear()),\n      /* Notify watchers (must be last because it should only happen if the operation succeeds) */\n      tap(() => {\n        for (const key of this.notifiers.keys()) {\n          this.notify(key, undefined);\n        }\n      }),\n    );\n\n  }\n\n  /**\n   * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n   * * if there is no key, the `next` callback will not be invoked,\n   * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n   * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n   * @returns A list of the keys wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.storageMap.keys().subscribe({\n   *   next: (key) => { console.log(key); },\n   *   complete: () => { console.log('Done'); },\n   * });\n   */\n  keys(): Observable<string> {\n\n    return this.database.keys()\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.keys()));\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS `Observable` telling if the key exists\n   *\n   * @example\n   * this.storageMap.has('key').subscribe((hasKey) => {\n   *   if (hasKey) {}\n   * });\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.database.has(key)\n      /* Catch if `indexedDb` is broken */\n      .pipe(this.catchIDBBroken(() => this.database.has(key)));\n\n  }\n\n  /**\n   * Watch an item value in storage.\n   * **Note only changes done via this lib will be watched**, external changes in storage can't be detected.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md\n   * @param key The item's key to watch\n   * @param schema Optional JSON schema to validate the initial value\n   * @returns An infinite `Observable` giving the current value\n   */\n  watch<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n  watch<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | undefined>;\n  watch<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n  watch<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n  watch<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | undefined>;\n  watch<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n  watch<T = unknown>(key: string, schema: JSONSchema): Observable<T | undefined>;\n  watch<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  watch<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown> {\n\n    /* Check if there is already a notifier and cast according to schema */\n    let notifier = this.notifiers.get(key) as ReplaySubject<typeof schema extends JSONSchema ? (T | undefined) : unknown>;\n\n    if (!notifier) {\n\n      /* Create a notifier and cast according to schema */\n      notifier = new ReplaySubject<typeof schema extends JSONSchema ? (T | undefined) : unknown>(1);\n\n      /* Memorize the notifier */\n      this.notifiers.set(key, notifier);\n\n      /* Get the current item value */\n      this.get<T>(key, schema).subscribe({\n        next: (result) => notifier.next(result),\n        error: (error) => notifier.error(error),\n      });\n\n    }\n\n    /* Only the public API of the `Observable` should be returned */\n    return notifier.asObservable();\n\n  }\n\n  /**\n   * Notify when a value changes\n   * @param key The item's key\n   * @param data The new value\n   */\n  protected notify(key: string, value: unknown): void {\n\n    const notifier = this.notifiers.get(key);\n\n    if (notifier) {\n      notifier.next(value);\n    }\n\n  }\n\n  /**\n   * RxJS operator to catch if `indexedDB` is broken\n   * @param operationCallback Callback with the operation to redo\n   */\n  protected catchIDBBroken<T>(operationCallback: () => Observable<T>): OperatorFunction<T, T> {\n\n    return catchError((error) => {\n\n      /* Check if `indexedDB` is broken based on error message (the specific error class seems to be lost in the process) */\n      if ((error !== undefined) && (error !== null) && (error.message === IDB_BROKEN_ERROR)) {\n\n        /* When storage is fully disabled in browser (via the \"Block all cookies\" option),\n         * just trying to check `localStorage` variable causes a security exception.\n         * Prevents https://github.com/cyrilletuzi/angular-async-local-storage/issues/118\n         */\n        try {\n\n          if ('getItem' in localStorage) {\n\n            /* Fallback to `localStorage` if available */\n            this.database = new LocalStorageDatabase(this.LSPrefix);\n\n          } else {\n\n            /* Fallback to memory storage otherwise */\n            this.database = new MemoryDatabase();\n\n          }\n\n        } catch {\n\n          /* Fallback to memory storage otherwise */\n          this.database = new MemoryDatabase();\n\n        }\n\n        /* Redo the operation */\n        return operationCallback();\n\n      } else {\n\n        /* Otherwise, rethrow the error */\n        return throwError(error);\n\n      }\n\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { mapTo, map } from 'rxjs/operators';\n\nimport { StorageMap } from './storage-map.service';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  /**\n   * Number of items in storage wrapped in an `Observable`\n   *\n   * @example\n   * this.localStorage.length.subscribe((length) => {\n   *   console.log(length);\n   * });\n   */\n  get length(): Observable<number> {\n\n    return this.storageMap.size;\n\n  }\n\n  /* Use the `StorageMap` service to avoid code duplication */\n  constructor(protected storageMap: StorageMap) {}\n\n  /**\n   * Get an item value in storage.\n   * The signature has many overloads due to validation, **please refer to the documentation.**\n   * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/master/docs/VALIDATION.md}\n   * @param key The item's key\n   * @param schema Optional JSON schema to validate the data.\n   * **Note you must pass the schema directly as the second argument.**\n   * **Passing the schema in an object `{ schema }` is deprecated and only here**\n   * **for backward compatibility: it will be removed in a future version.**\n   * @returns The item's value if the key exists, `null` otherwise, wrapped in a RxJS `Observable`\n   *\n   * @example\n   * this.localStorage.get('key', { type: 'string' }).subscribe((result) => {\n   *   result; // string or null\n   * });\n   *\n   * @example\n   * interface User {\n   *   firstName: string;\n   *   lastName?: string;\n   * }\n   *\n   * const schema = {\n   *   type: 'object',\n   *   properties: {\n   *     firstName: { type: 'string' },\n   *     lastName: { type: 'string' },\n   *   },\n   *   required: ['firstName']\n   * };\n   *\n   * this.localStorage.get<User>('user', schema).subscribe((user) => {\n   *   if (user) {\n   *     user.firstName;\n   *   }\n   * });\n   */\n  getItem<T = string>(key: string, schema: JSONSchemaString): Observable<string | null>;\n  getItem<T = number>(key: string, schema: JSONSchemaIntegerÂ | JSONSchemaNumber): Observable<number | null>;\n  getItem<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | null>;\n  getItem<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | null>;\n  getItem<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaIntegerÂ | JSONSchemaNumber>): Observable<number[] | null>;\n  getItem<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | null>;\n  getItem<T = unknown>(key: string, schema: JSONSchema | { schema: JSONSchema }): Observable<T | null>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n  getItem<T = unknown>(key: string, schema?: JSONSchema | { schema: JSONSchema } | undefined): Observable<unknown> {\n\n    if (schema) {\n\n      /* Backward compatibility with version <= 7 */\n      const schemaFinal: JSONSchema = ('schema' in schema) ? schema.schema : schema;\n\n      return this.storageMap.get<T>(key, schemaFinal).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    } else {\n\n      return this.storageMap.get(key).pipe(\n        /* Transform `undefined` into `null` to align with `localStorage` API */\n        map((value) => (value !== undefined) ? value : null),\n      );\n\n    }\n\n  }\n\n  /**\n   * Set an item in storage.\n   * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n   * @param key The item's key\n   * @param data The item's value\n   * @param schema Optional JSON schema to validate the data\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.set('key', 'value').subscribe(() => {});\n   */\n  setItem(key: string, data: unknown, schema?: JSONSchema): Observable<boolean> {\n\n    return this.storageMap.set(key, data, schema).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete an item in storage\n   * @param key The item's key\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.delete('key').subscribe(() => {});\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    return this.storageMap.delete(key).pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n  /**\n   * Delete all items in storage\n   * @returns A RxJS `Observable` to wait the end of the operation\n   *\n   * @example\n   * this.localStorage.clear().subscribe(() => {});\n   */\n  clear(): Observable<boolean> {\n\n    return this.storageMap.clear().pipe(\n      /* Transform `undefined` into `true` for backward compatibility with v7 */\n      mapTo(true),\n    );\n\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LS_PREFIX, IDB_DB_NAME, IDB_STORE_NAME, IDB_DB_VERSION, IDB_NO_WRAP, StorageConfig } from './tokens';\n\n/**\n * This module does not contain anything, it's only useful to provide options via `.forRoot()`.\n */\n@NgModule()\nexport class StorageModule {\n\n  /**\n   * Only useful to provide options, otherwise it does nothing.\n   * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**\n   *\n   * @example\n   * NgModule({\n   *   imports: [StorageModule.forRoot({\n   *     LSPrefix: 'custom_',\n   *   })]\n   * })\n   * export class AppModule\n   */\n  static forRoot(config: StorageConfig): ModuleWithProviders<StorageModule> {\n    return {\n      ngModule: StorageModule,\n      providers: [\n        config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],\n        config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],\n        config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],\n        config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],\n        (config.IDBNoWrap === false) ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],\n      ],\n    };\n  }\n\n}\n","/*\n * Public API Surface of local-storage\n */\n\n// TODO: Test with Bazel\n\nexport {\n  JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString,\n  JSONSchemaArray, JSONSchemaArrayOf, JSONSchemaObject\n} from './lib/validation';\nexport { LocalDatabase, SERIALIZATION_ERROR, SerializationError } from './lib/databases';\nexport { LocalStorage, StorageMap, ValidationError, VALIDATION_ERROR } from './lib/storages';\nexport { JSONValidator } from './lib/validation';\nexport { StorageConfig } from './lib/tokens';\nexport { StorageModule } from './lib/storage.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {IDB_DB_NAME as Éµb,IDB_DB_VERSION as Éµc,IDB_NO_WRAP as Éµe,IDB_STORE_NAME as Éµd,LS_PREFIX as Éµa} from './lib/tokens';"],"names":[],"mappings":";;;;;;AAAA;;;AAGO,IAAM,gBAAgB,GAAG,0BAA0B,CAAC;AAE3D;;;AAGA;IAAoC,kCAAK;IAAzC;QAAA,qEAEC;QADC,aAAO,GAAG,gBAAgB,CAAC;;KAC5B;IAAD,qBAAC;AAAD,CAFA,CAAoC,KAAK,GAExC;AAED;;;IAGa,mBAAmB,GAAG,oHACwC;AAE3E;;;;IAGwC,sCAAK;IAA7C;QAAA,qEAEC;QADC,aAAO,GAAG,mBAAmB,CAAC;;KAC/B;IAAD,yBAAC;AAAD,CAFA,CAAwC,KAAK;;ACnB7C;;;AAGA,IAAa,SAAS,GAAG,IAAI,cAAc,CAAS,oBAAoB,EAAE;IACxE,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAM,OAAA,EAAE,GAAA;CAClB,CAAC,CAAC;AAEH;;;AAGA,AAAO,IAAM,mBAAmB,GAAG,WAAW,CAAC;AAE/C;;;AAGA,IAAa,WAAW,GAAG,IAAI,cAAc,CAAS,uBAAuB,EAAE;IAC7E,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAM,OAAA,mBAAmB,GAAA;CACnC,CAAC,CAAC;AAEH;;;AAGA,AAAO,IAAM,sBAAsB,GAAG,CAAC,CAAC;AAExC;;;;AAIA,IAAa,cAAc,GAAG,IAAI,cAAc,CAAS,0BAA0B,EAAE;IACnF,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAM,OAAA,sBAAsB,GAAA;CACtC,CAAC,CAAC;AAEH;;;AAGA,AAAO,IAAM,sBAAsB,GAAG,cAAc,CAAC;AAErD;;;;AAIA,IAAa,cAAc,GAAG,IAAI,cAAc,CAAS,0BAA0B,EAAE;IACnF,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAM,OAAA,sBAAsB,GAAA;CACtC,CAAC,CAAC;AAEH;;;;AAIA,AAAO,IAAM,mBAAmB,GAAG,IAAI,CAAC;AAExC;;;;;;AAMA,IAAa,WAAW,GAAG,IAAI,cAAc,CAAU,qBAAqB,EAAE;IAC5E,UAAU,EAAE,MAAM;IAClB,OAAO,EAAE,cAAM,OAAA,mBAAmB,GAAA;CACnC,CAAC;;ACpDF;;;;;;;;IAwCE,2BACuB,MAA4B,EACzB,SAAkC,EAClC,SAAkC,EACrC,MAA4B;QAH5B,uBAAA,EAAA,4BAA4B;QACzB,0BAAA,EAAA,kCAAkC;QAClC,0BAAA,EAAA,kCAAkC;QACrC,uBAAA,EAAA,4BAA4B;;;;;QAvBhC,aAAQ,GAAG,IAAI,aAAa,CAAc,CAAC,CAAC,CAAC;;;;QAU7C,cAAS,GAAG,OAAO,CAAC;QAgBrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;QAGrB,IAAI,CAAC,OAAO,EAAE,CAAC;KAEhB;IAMD,sBAAI,2CAAY;;;;;aAAhB;YAEE,OAAO;gBACL,QAAQ,EAAE,IAAI,CAAC,MAAM;gBACrB,KAAK,EAAE,IAAI,CAAC,SAAS;gBACrB,OAAO,EAAE,IAAI,CAAC,SAAS;aACxB,CAAC;SAEH;;;OAAA;IAKD,sBAAI,mCAAI;;;;aAAR;;YAGE,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CACtC,QAAQ,CAAC,UAAC,eAAe;gBAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;gBAG1C,IAAM,OAAO,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;;gBAG9B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,OAAO,CAAC,MAAM,GAAA,CAAC,CAAC,CAAC;aAE/C,CAAC;;YAEF,KAAK,EAAE,CACR,CAAC;SAEH;;;OAAA;;;;;;IAOD,+BAAG,GAAH,UAAiB,GAAW;QAA5B,iBAyCC;;QAtCC,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CACtC,QAAQ,CAAC,UAAC,eAAe;YAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;YAG1C,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;YAG/B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;gBAErB,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,MAAM,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;;oBAG/D,IAAI,CAAC,KAAI,CAAC,MAAM,KAAK,OAAO,OAAO,CAAC,MAAM,KAAK,QAAQ,CAAC,KAAK,KAAI,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,CAAC;yBAC7F,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC,KAAK,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,EAAE;wBAE3F,OAAQ,OAAO,CAAC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAO,CAAC;qBAE9C;yBAAM;;wBAGL,OAAO,OAAO,CAAC,MAAW,CAAC;qBAE5B;iBAEF;;gBAGD,OAAO,SAAS,CAAC;aAElB,CAAC,CAAC,CAAC;SAEL,CAAC;;QAEF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;;IAQD,+BAAG,GAAH,UAAI,GAAW,EAAE,IAAa;QAA9B,iBA2BC;;QAxBC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;;QAGD,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CACvC,QAAQ,CAAC,UAAC,eAAe;;YAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;YAG1C,IAAM,WAAW,GAAG,KAAI,CAAC,MAAM,GAAG,IAAI,aAAK,GAAC,KAAI,CAAC,SAAS,IAAG,IAAI,KAAE,CAAC;;YAGpE,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;;YAG5B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SAEtC,CAAC;;QAEF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;;IAOD,kCAAM,GAAN,UAAO,GAAW;;QAGhB,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CACvC,QAAQ,CAAC,UAAC,eAAe;YAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;YAG1C,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;;YAGlB,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SAEtC,CAAC;;QAEF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;IAMD,iCAAK,GAAL;;QAGE,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CACvC,QAAQ,CAAC,UAAC,eAAe;YAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;YAG1C,KAAK,CAAC,KAAK,EAAE,CAAC;;YAGd,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SAEtC,CAAC;;QAEF,KAAK,EAAE,CACR,CAAC;KAEH;;;;;IAMD,gCAAI,GAAJ;QAAA,iBAqCC;;QAlCC,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI;;;;QAItC,KAAK,EAAE,EACP,QAAQ,CAAC,UAAC,eAAe;YAEf,IAAA,6BAAK,CAAqB;;;;YAKlC,IAAM,OAAO,GAAG,CAAC,eAAe,IAAI,KAAK,IAAI,KAAK,CAAC,aAAa,EAAE,GAAI,KAAwB,CAAC,UAAU,EAAE,CAAC;;YAG5G,IAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,IAAI;;YAEjD,SAAS,CAAC,cAAM,QAAC,OAAO,CAAC,MAAM,KAAK,IAAI,IAAC,CAAC;;;YAG1C,GAAG,CAAC,cAAM,OAAC,OAAO,CAAC,MAAoB,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAA,CAAC;;YAEvD,GAAG,CAAC,cAAS,OAAO,CAAC,MAAoB,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CACzD,CAAC;;YAGF,IAAM,MAAM,GAAG,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;YAGzC,OAAO,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;SAEjC,CAAC,CACH,CAAC;KAEH;;;;;IAMD,+BAAG,GAAH,UAAI,GAAW;;QAGb,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CACtC,QAAQ,CAAC,UAAC,eAAe;YAEf,IAAA,6BAAK,EAAE,+BAAM,CAAqB;;;;;;;YAQ1C,IAAM,OAAO,GAAI,CAAC,QAAQ,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAI,KAAwB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;YAG9F,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAM,OAAA,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,GAAG,KAAK,GAAA,CAAC,CAAC,CAAC;SAE9E,CAAC;;QAEF,KAAK,EAAE,CACR,CAAC;KAEH;;;;IAKS,mCAAO,GAAjB;QAAA,iBA4CC;QA1CC,IAAI,OAAyB,CAAC;;;;QAK9B,IAAI;;YAGF,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAEvD;QAAC,WAAM;YAEN,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;YAE1C,OAAO;SAER;;QAGD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;QAG1B,IAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;QAGzC,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;;aAErB,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CAAC;YACT,IAAI,EAAE;;gBAEJ,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aACpC;YACD,KAAK,EAAE;;;;gBAIL,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;aAC3C;SACF,CAAC,CAAC;KAEN;;;;;IAMS,uCAAW,GAArB,UAAsB,OAAyB;QAA/C,iBAoBC;;QAjBC,SAAS,CAAC,OAAO,EAAE,eAAe,CAAC;;aAEhC,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CAAC;YACT,IAAI,EAAE;;gBAGJ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAI,CAAC,SAAS,CAAC,EAAE;;oBAG7D,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;iBAElD;aAEF;SACF,CAAC,CAAC;KAEN;;;;;;IAOS,uCAAW,GAArB,UAAsB,IAAwB;QAA9C,iBAgCC;;QA1BC,OAAO,IAAI,CAAC,QAAQ;aACjB,IAAI,CAAC,QAAQ,CAAC,UAAC,QAAQ;YAEtB,IAAI,WAA2B,CAAC;YAEhC,IAAI;gBAEF,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;aAE5D;YAAC,OAAO,KAAK,EAAE;;gBAGZ,OAAO,UAAU,CAAC,KAAqB,CAAC,CAAC;aAE5C;;YAGD,IAAM,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;;YAGtD,IAAM,MAAM,GAAG,KAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAEzD,OAAO,EAAE,CAAC,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;SAE9B,CAAC,CAAC,CAAC;KAEP;;;;;;IAOS,uCAAW,GAArB,UAAsB,oBAAiD;QAErE,OAAO,SAAS,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC,IAAI;;QAElD,QAAQ,CAAC,cAAM,OAAA,UAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC,GAAA,CAAC,CACvD,CAAC;KAEH;;;;;;IAOS,mDAAuB,GAAjC,UAAkC,WAA2B;;QAG3D,IAAM,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;;QAGrD,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;;QAG7C,OAAO,IAAI,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;KAElC;;gDArZE,MAAM,SAAC,WAAW;gDAClB,MAAM,SAAC,cAAc;gDACrB,MAAM,SAAC,cAAc;gDACrB,MAAM,SAAC,WAAW;;;IA5CV,iBAAiB;QAH7B,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;QA0CG,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;QACnB,WAAA,MAAM,CAAC,cAAc,CAAC,CAAA;QACtB,WAAA,MAAM,CAAC,cAAc,CAAC,CAAA;QACtB,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;OA5CX,iBAAiB,CAgc7B;4BA9cD;CAcA,IAgcC;;ACncD;;;;;IAWE,8BACqB,MAAW;QAAX,uBAAA,EAAA,WAAW;;QAI9B,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;KAE5B;IAKD,sBAAI,sCAAI;;;;aAAR;;YAGE,OAAO,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAEhC;;;OAAA;;;;;;IAOD,kCAAG,GAAH,UAAiB,GAAW;;QAG1B,IAAM,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAE/D,IAAI,UAAyB,CAAC;;QAG9B,IAAI,CAAC,YAAY,KAAK,SAAS,MAAM,YAAY,KAAK,IAAI,CAAC,EAAE;;YAG3D,IAAI;gBACF,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAM,CAAC;aAC5C;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,UAAU,CAAC,KAAoB,CAAC,CAAC;aACzC;SAEF;;QAGD,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;KAEvB;;;;;;;IAQD,kCAAG,GAAH,UAAI,GAAW,EAAE,IAAa;QAE5B,IAAI,cAAc,GAAkB,IAAI,CAAC;;QAGzC,IAAM,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,IAAI,KAAK,QAAQ,MAAM,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YACzE,EAAE,CAAC,aAAa,KAAK,MAAM,CAAC,SAAS,MAAM,aAAa,KAAK,IAAI,CAAC,CAAC,EAAE;YACnE,OAAO,UAAU,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;SAC7C;;QAGD,IAAI;YACF,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACvC;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,UAAU,CAAC,KAAkB,CAAC,CAAC;SACvC;;QAGD,IAAI;YACF,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;SAC3D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,UAAU,CAAC,KAAqB,CAAC,CAAC;SAC1C;;QAGD,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;;IAOD,qCAAM,GAAN,UAAO,GAAW;QAEhB,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;;QAG7C,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;IAMD,oCAAK,GAAL;QAEE,YAAY,CAAC,KAAK,EAAE,CAAC;;QAGrB,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;;IAOD,mCAAI,GAAJ;QAAA,iBAoBC;;QAjBC,OAAO,IAAI,UAAU,CAAS,UAAC,UAAU;;YAGvC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;;gBAG3D,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAW,CAAC,CAAC;aAEzD;YAED,UAAU,CAAC,QAAQ,EAAE,CAAC;SAEvB,CAAC,CAAC,IAAI;;QAEL,SAAS,CAAC,cAAc,CAAC,CAC1B,CAAC;KAEH;;;;;;IAOD,kCAAG,GAAH,UAAI,GAAW;;QAGb,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;YAE3D,IAAI,GAAG,KAAK,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;;gBAGxC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;aAEjB;SAEF;;QAGD,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;KAElB;;;;;;IAOS,+CAAgB,GAA1B,UAA2B,KAAa;;QAGtC,IAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,WAAW,KAAK,IAAI,EAAE;;YAGxB,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAE5E;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;IAOS,wCAAS,GAAnB,UAAoB,GAAW;QAE7B,OAAO,KAAG,IAAI,CAAC,MAAM,GAAG,GAAK,CAAC;KAE/B;;gDA/LE,MAAM,SAAC,SAAS;;;IAZR,oBAAoB;QAHhC,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;QAaG,WAAA,MAAM,CAAC,SAAS,CAAC,CAAA;OAZT,oBAAoB,CA6MhC;+BAxND;CAWA,IA6MC;;AChND;IAAA;;;;QAKY,kBAAa,GAAG,IAAI,GAAG,EAAmB,CAAC;KA2FtD;IAtFC,sBAAI,gCAAI;;;;aAAR;;YAGE,OAAO,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAEpC;;;OAAA;;;;;;IAOA,4BAAG,GAAH,UAAiB,GAAW;QAE3B,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAkB,CAAC;;QAG7D,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC;KAEpB;;;;;;;IAQA,4BAAG,GAAH,UAAI,GAAW,EAAE,IAAa;QAE7B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;;QAGlC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;;IAOA,+BAAM,GAAN,UAAO,GAAW;QAEjB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;;QAG/B,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;IAMA,8BAAK,GAAL;QAEC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;;QAG3B,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;KAEtB;;;;;IAMD,6BAAI,GAAJ;;QAGE,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;KAExC;;;;;;IAOD,4BAAG,GAAH,UAAI,GAAW;;QAGb,OAAO,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAExC;;IA9FU,cAAc;QAH1B,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,cAAc,CAgG1B;yBAxGD;CAQA,IAgGC;;AC/FD;;;;;;;;AAQA,SAAgB,oBAAoB,CAClC,UAAkB,EAAE,QAAgB,EAAE,SAAiB,EAAE,YAAoB,EAC7E,YAAoB,EAAE,SAAkB;;;;;IAMxC,IAAI;;QAGF,IAAI,iBAAiB,CAAC,UAAU,CAAC,KAAK,SAAS,KAAK,SAAS,CAAC,KAAK,SAAS,KAAK,IAAI,CAAC,KAAK,MAAM,IAAI,SAAS,CAAC,EAAE;;;;;;;;;YAU/G,OAAO,IAAI,iBAAiB,CAAC,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;SAEhF;aAAM,IAAI,iBAAiB,CAAC,UAAU,CAAC;gBACpC,YAAY,KAAK,SAAS,CAAC,KAAK,YAAY,KAAK,IAAI,CAAC,KAAK,SAAS,IAAI,YAAY,CAAC,EAAE;;;;;;;;;;;;;YAczF,OAAO,IAAI,oBAAoB,CAAC,QAAQ,CAAC,CAAC;SAE3C;KAEF;IAAC,WAAM,GAAE;;;;;;IAOV,OAAO,IAAI,cAAc,EAAE,CAAC;AAE9B,CAAC;AAcD;IAAA;KAWC;;IAXqB,aAAa;QAZlC,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;YAClB,UAAU,EAAE,oBAAoB;YAChC,IAAI,EAAE;gBACJ,WAAW;gBACX,SAAS;gBACT,WAAW;gBACX,cAAc;gBACd,cAAc;gBACd,WAAW;aACZ;SACF,CAAC;OACoB,aAAa,CAWlC;wBA7FD;CAkFA;;AClFA;;;AAGA,IAAa,gBAAgB,GAAG,iIACoC,CAAC;AAErE;;;AAGA;IAAqC,mCAAK;IAA1C;QAAA,qEAEC;QADC,aAAO,GAAG,gBAAgB,CAAC;;KAC5B;IAAD,sBAAC;AAAD,CAFA,CAAqC,KAAK;;ACH1C;AAIA;IAAA;KAqTC;;;;;;;;;IA3SC,gCAAQ,GAAR,UAAS,IAAa,EAAE,MAAkB;QAExC,QAAQ,MAAM,CAAC,IAAI;YAEjB,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC1C,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAE5C;KAEF;;;;;;;IAQS,sCAAc,GAAxB,UAAyB,IAAa,EAAE,MAAwB;QAE9D,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,SAAS,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,SAAS,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,MAAM,CAAC,OAAO,EAAE;YAElB,IAAI,iBAAiB,GAAkB,IAAI,CAAC;YAE5C,IAAI;gBACF,iBAAiB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAChD;YAAC,WAAM,GAAE;YAEV,IAAI,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACtD,OAAO,KAAK,CAAC;aACd;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,sCAAc,GAAxB,UAAyB,IAAa,EAAE,MAA4C;QAElF,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,EAAE;YACpE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE;YAC3D,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,MAAM,CAAC,gBAAgB,KAAK,SAAS,MAAM,IAAI,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;YAChF,OAAO,KAAK,CAAC;SAEd;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,SAAS,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE;YAC7D,OAAO,KAAK,CAAC;SAEd;QAED,IAAI,CAAC,MAAM,CAAC,gBAAgB,KAAK,SAAS,MAAM,IAAI,IAAI,MAAM,CAAC,gBAAgB,CAAC,EAAE;YAC9E,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,uCAAe,GAAzB,UAA0B,IAAa,EAAE,MAAyB;QAEhE,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC7B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,qCAAa,GAAvB,UAAwB,IAAa,EAAE,MAAuB;;QAE5D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE;YACtE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE;YACtE,OAAO,KAAK,CAAC;SACd;QAED,IAAI,MAAM,CAAC,WAAW,EAAE;;YAGtB,IAAM,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;YAE9B,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;gBAChC,OAAO,KAAK,CAAC;aACd;SAEF;;QAGD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;SAE/C;;;YAGD,KAAoB,IAAA,SAAA,SAAA,IAAI,CAAA,0BAAA,4CAAE;gBAArB,IAAM,KAAK,iBAAA;gBAEd,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;oBACvC,OAAO,KAAK,CAAC;iBACd;aAEF;;;;;;;;;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,qCAAa,GAAvB,UAAwB,IAAe,EAAE,OAAqB;;QAG5D,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;YAElC,OAAO,KAAK,CAAC;SAEd;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAE1C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;gBACvC,OAAO,KAAK,CAAC;aACd;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,sCAAc,GAAxB,UAAyB,IAAa,EAAE,MAAwB;;;QAG9D,IAAI,CAAC,OAAO,IAAI,KAAK,QAAQ,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;YACjD,OAAO,KAAK,CAAC;SACd;;;;QAKD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;YACpE,OAAO,KAAK,CAAC;SACd;;QAGD,IAAI,MAAM,CAAC,QAAQ,EAAE;;gBAEnB,KAA2B,IAAA,KAAA,SAAA,MAAM,CAAC,QAAQ,CAAA,gBAAA,4BAAE;oBAAvC,IAAM,YAAY,WAAA;oBAErB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;wBACtC,OAAO,KAAK,CAAC;qBACd;iBAEF;;;;;;;;;SAEF;;QAGD,KAAK,IAAM,QAAQ,IAAI,MAAM,CAAC,UAAU,EAAE;;YAGxC,IAAI,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAE/E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAE,IAAkC,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE;oBAC9F,OAAO,KAAK,CAAC;iBACd;aAEF;SAEF;QAED,OAAO,IAAI,CAAC;KAEb;;;;;;;IAQS,qCAAa,GAAvB,UAAwB,IAAa,EAAE,MAAmF;QAExH,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,QAAQ,IAAI,KAAK,MAAM,CAAC,KAAK,EAAE;KAEhC;;;;;;;IAQS,oCAAY,GAAtB,UAAuB,IAAa,EAAE,MAA+D;QAEnG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;;QAGD,QAAS,MAAM,CAAC,IAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;KAEpD;;IAnTU,aAAa;QAHzB,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,aAAa,CAqTzB;wBA/TD;CAUA;;;;;;;;;ICeE,oBACY,QAAuB,EACvB,aAAkD,EAC/B,QAAa;QADhC,8BAAA,EAAA,oBAAmC,aAAa,EAAE;QAC/B,yBAAA,EAAA,aAAa;QAFhC,aAAQ,GAAR,QAAQ,CAAe;QACvB,kBAAa,GAAb,aAAa,CAAqC;QAC/B,aAAQ,GAAR,QAAQ,CAAK;QAXlC,cAAS,GAAG,IAAI,GAAG,EAAkC,CAAC;KAY5D;IAUJ,sBAAI,4BAAI;;;;;;;;;aAAR;YAAA,iBAMC;YAJC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI;;iBAEtB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,GAAA,CAAC,CAAC,CAAC;SAExD;;;OAAA;IAgBD,sBAAI,qCAAa;;;;;;;;;;;;;;;aAAjB;YAEE,IAAI,IAAI,CAAC,QAAQ,YAAY,iBAAiB,EAAE;gBAE9C,OAAO,WAAW,CAAC;aAEpB;iBAAM,IAAI,IAAI,CAAC,QAAQ,YAAY,oBAAoB,EAAE;gBAExD,OAAO,cAAc,CAAC;aAEvB;iBAAM,IAAI,IAAI,CAAC,QAAQ,YAAY,cAAc,EAAE;gBAElD,OAAO,QAAQ,CAAC;aAEjB;iBAAM;gBAEL,OAAO,SAAS,CAAC;aAElB;SAEF;;;OAAA;IAeD,sBAAI,oCAAY;;;;;;;;;;;;;;aAAhB;YAEE,OAAO,CAAC,IAAI,CAAC,QAAQ,YAAY,iBAAiB;gBAChD,IAAI,CAAC,QAAQ,CAAC,YAAY;gBAC1B,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;SAE3C;;;OAAA;IAeD,sBAAI,4CAAoB;;;;;;;;;;;;;;aAAxB;YAEE,OAAO,CAAC,IAAI,CAAC,QAAQ,YAAY,oBAAoB;gBACnD,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAChC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SAElB;;;OAAA;IA4CD,wBAAG,GAAH,UAAiB,GAAW,EAAE,MAAmB;QAAjD,iBA+BC;;QA5BC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAI,GAAG,CAAC,CAAC,IAAI;;QAEnC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAI,GAAG,CAAC,GAAA,CAAC,EACpD,QAAQ,CAAC,UAAC,IAAI;;YAGZ,IAAI,CAAC,IAAI,KAAK,SAAS,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;gBAE3C,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;aAEtB;iBAAM,IAAI,MAAM,EAAE;;gBAGjB,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;oBAC9C,OAAO,UAAU,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC;iBAC1C;;gBAGD,OAAO,EAAE,CAAC,IAAqB,CAAC,CAAC;aAElC;;YAGD,OAAO,EAAE,CAAC,IAAe,CAAC,CAAC;SAE5B,CAAC,CACH,CAAC;KAEH;;;;;;;;;;;;IAaD,wBAAG,GAAH,UAAI,GAAW,EAAE,IAAa,EAAE,MAAmB;QAAnD,iBAmBC;;;QAfC,IAAI,CAAC,IAAI,KAAK,SAAS,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;;QAGD,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACxD,OAAO,UAAU,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI;;QAEtC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAA,CAAC;;QAEvD,GAAG,CAAC,cAAQ,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CACvC,CAAC;KACH;;;;;;;;;IAUD,2BAAM,GAAN,UAAO,GAAW;QAAlB,iBASC;QAPC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;;QAEnC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAA,CAAC;;QAEpD,GAAG,CAAC,cAAQ,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,CAC5C,CAAC;KAEH;;;;;;;;IASD,0BAAK,GAAL;QAAA,iBAaC;QAXC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI;;QAE/B,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAA,CAAC;;QAEhD,GAAG,CAAC;;;gBACF,KAAkB,IAAA,KAAA,SAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA,gBAAA,4BAAE;oBAApC,IAAM,GAAG,WAAA;oBACZ,KAAI,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;iBAC7B;;;;;;;;;SACF,CAAC,CACH,CAAC;KAEH;;;;;;;;;;;;;;IAeD,yBAAI,GAAJ;QAAA,iBAMC;QAJC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;;aAExB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAA,CAAC,CAAC,CAAC;KAE1D;;;;;;;;;;IAWD,wBAAG,GAAH,UAAI,GAAW;QAAf,iBAMC;QAJC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;;aAE1B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC,CAAC;KAE5D;IAmBD,0BAAK,GAAL,UAAmB,GAAW,EAAE,MAAmB;;QAGjD,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAgF,CAAC;QAEtH,IAAI,CAAC,QAAQ,EAAE;;YAGb,QAAQ,GAAG,IAAI,aAAa,CAA+D,CAAC,CAAC,CAAC;;YAG9F,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;;YAGlC,IAAI,CAAC,GAAG,CAAI,GAAG,EAAE,MAAM,CAAC,CAAC,SAAS,CAAC;gBACjC,IAAI,EAAE,UAAC,MAAM,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAA;gBACvC,KAAK,EAAE,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAA;aACxC,CAAC,CAAC;SAEJ;;QAGD,OAAO,QAAQ,CAAC,YAAY,EAAE,CAAC;KAEhC;;;;;;IAOS,2BAAM,GAAhB,UAAiB,GAAW,EAAE,KAAc;QAE1C,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEzC,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;KAEF;;;;;IAMS,mCAAc,GAAxB,UAA4B,iBAAsC;QAAlE,iBA4CC;QA1CC,OAAO,UAAU,CAAC,UAAC,KAAK;;YAGtB,IAAI,CAAC,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,CAAC,OAAO,KAAK,gBAAgB,CAAC,EAAE;;;;;gBAMrF,IAAI;oBAEF,IAAI,SAAS,IAAI,YAAY,EAAE;;wBAG7B,KAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;qBAEzD;yBAAM;;wBAGL,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;qBAEtC;iBAEF;gBAAC,WAAM;;oBAGN,KAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;iBAEtC;;gBAGD,OAAO,iBAAiB,EAAE,CAAC;aAE5B;iBAAM;;gBAGL,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;aAE1B;SAEF,CAAC,CAAC;KAEJ;;gBAvYqB,aAAa;gBACR,aAAa;gDACrC,MAAM,SAAC,SAAS;;;IAbR,UAAU;QAHtB,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;QAcG,WAAA,MAAM,CAAC,SAAS,CAAC,CAAA;OAbT,UAAU,CAoZtB;qBAnaD;CAeA;;;;ICYE,sBAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAAI;IAPhD,sBAAI,gCAAM;;;;;;;;;aAAV;YAEE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;SAE7B;;;OAAA;IAkDD,8BAAO,GAAP,UAAqB,GAAW,EAAE,MAAwD;QAExF,IAAI,MAAM,EAAE;;YAGV,IAAM,WAAW,GAAe,CAAC,QAAQ,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YAE9E,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAI,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI;;YAElD,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,GAAG,IAAI,GAAA,CAAC,CACrD,CAAC;SAEH;aAAM;YAEL,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI;;YAElC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,GAAG,IAAI,GAAA,CAAC,CACrD,CAAC;SAEH;KAEF;;;;;;;;;;;;IAaD,8BAAO,GAAP,UAAQ,GAAW,EAAE,IAAa,EAAE,MAAmB;QAErD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI;;QAEhD,KAAK,CAAC,IAAI,CAAC,CACZ,CAAC;KAEH;;;;;;;;;IAUD,iCAAU,GAAV,UAAW,GAAW;QAEpB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI;;QAErC,KAAK,CAAC,IAAI,CAAC,CACZ,CAAC;KAEH;;;;;;;;IASD,4BAAK,GAAL;QAEE,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,IAAI;;QAEjC,KAAK,CAAC,IAAI,CAAC,CACZ,CAAC;KAEH;;gBAzHiC,UAAU;;;IAjBjC,YAAY;QAHxB,UAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,YAAY,CA4IxB;uBAtJD;CAUA;;ACNA;;;AAIA;IAAA;KA2BC;sBA3BY,aAAa;;;;;;;;;;;;;IAcjB,qBAAO,GAAd,UAAe,MAAqB;QAClC,OAAO;YACL,QAAQ,EAAE,eAAa;YACvB,SAAS,EAAE;gBACT,MAAM,CAAC,QAAQ,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE;gBACxE,MAAM,CAAC,SAAS,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE;gBAC5E,MAAM,CAAC,YAAY,GAAG,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,GAAG,EAAE;gBACrF,MAAM,CAAC,YAAY,GAAG,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,GAAG,EAAE;gBACrF,CAAC,MAAM,CAAC,SAAS,KAAK,KAAK,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE;aACzF;SACF,CAAC;KACH;;IAzBU,aAAa;QADzB,QAAQ,EAAE;OACE,aAAa,CA2BzB;IAAD,oBAAC;CA3BD;;ACRA;;GAEG;;ACFH;;GAEG;;;;"}