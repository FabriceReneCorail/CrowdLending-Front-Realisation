import { ECalendarValue } from '../common/types/calendar-value-enum';
import { SingleCalendarValue } from '../common/types/single-calendar-value';
import { ECalendarMode } from '../common/types/calendar-mode-enum';
import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChange, SimpleChanges } from '@angular/core';
import { DayCalendarService } from './day-calendar.service';
import { Moment, unitOfTime } from 'moment';
import { IDayCalendarConfig, IDayCalendarConfigInternal } from './day-calendar-config.model';
import { IDay } from './day.model';
import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { CalendarValue } from '../common/types/calendar-value';
import { UtilsService } from '../common/services/utils/utils.service';
import { IMonthCalendarConfig } from '../month-calendar/month-calendar-config';
import { IMonth } from '../month-calendar/month.model';
import { DateValidator } from '../common/types/validator.type';
import { INavEvent } from '../common/models/navigation-event.model';
import * as ɵngcc0 from '@angular/core';
export declare class DayCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {
    readonly dayCalendarService: DayCalendarService;
    readonly utilsService: UtilsService;
    readonly cd: ChangeDetectorRef;
    get selected(): Moment[];
    set selected(selected: Moment[]);
    get currentDateView(): Moment;
    set currentDateView(current: Moment);
    config: IDayCalendarConfig;
    displayDate: SingleCalendarValue;
    minDate: Moment;
    maxDate: Moment;
    theme: string;
    onSelect: EventEmitter<IDay>;
    onMonthSelect: EventEmitter<IMonth>;
    onNavHeaderBtnClick: EventEmitter<ECalendarMode>;
    onGoToCurrent: EventEmitter<void>;
    onLeftNav: EventEmitter<INavEvent>;
    onRightNav: EventEmitter<INavEvent>;
    CalendarMode: typeof ECalendarMode;
    isInited: boolean;
    componentConfig: IDayCalendarConfigInternal;
    weeks: IDay[][];
    weekdays: Moment[];
    inputValue: CalendarValue;
    inputValueType: ECalendarValue;
    validateFn: DateValidator;
    currentCalendarMode: ECalendarMode;
    monthCalendarConfig: IMonthCalendarConfig;
    _shouldShowCurrent: boolean;
    navLabel: string;
    showLeftNav: boolean;
    showRightNav: boolean;
    api: {
        moveCalendarsBy: any;
        moveCalendarTo: any;
        toggleCalendarMode: any;
    };
    _selected: Moment[];
    _currentDateView: Moment;
    constructor(dayCalendarService: DayCalendarService, utilsService: UtilsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    init(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: CalendarValue): void;
    registerOnChange(fn: any): void;
    onChangeCallback(_: any): void;
    registerOnTouched(fn: any): void;
    validate(formControl: FormControl): ValidationErrors | any;
    processOnChangeCallback(value: Moment[]): CalendarValue;
    initValidators(): void;
    dayClicked(day: IDay): void;
    getDayBtnText(day: IDay): string;
    getDayBtnCssClass(day: IDay): {
        [klass: string]: boolean;
    };
    onLeftNavClick(): void;
    onRightNavClick(): void;
    onMonthCalendarLeftClick(change: INavEvent): void;
    onMonthCalendarRightClick(change: INavEvent): void;
    onMonthCalendarSecondaryLeftClick(change: INavEvent): void;
    onMonthCalendarSecondaryRightClick(change: INavEvent): void;
    getWeekdayName(weekday: Moment): string;
    toggleCalendarMode(mode: ECalendarMode): void;
    monthSelected(month: IMonth): void;
    moveCalendarsBy(current: Moment, amount: number, granularity?: unitOfTime.Base): void;
    moveCalendarTo(to: SingleCalendarValue): void;
    shouldShowCurrent(): boolean;
    goToCurrent(): void;
    handleConfigChange(config: SimpleChange): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayCalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayCalendarComponent, "dp-day-calendar", never, { "config": "config"; "displayDate": "displayDate"; "minDate": "minDate"; "maxDate": "maxDate"; "theme": "theme"; }, { "onSelect": "onSelect"; "onMonthSelect": "onMonthSelect"; "onNavHeaderBtnClick": "onNavHeaderBtnClick"; "onGoToCurrent": "onGoToCurrent"; "onLeftNav": "onLeftNav"; "onRightNav": "onRightNav"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LWNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXktY2FsZW5kYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL2NhbGVuZGFyLXZhbHVlLWVudW0nO1xuaW1wb3J0IHsgU2luZ2xlQ2FsZW5kYXJWYWx1ZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9zaW5nbGUtY2FsZW5kYXItdmFsdWUnO1xuaW1wb3J0IHsgRUNhbGVuZGFyTW9kZSB9IGZyb20gJy4uL2NvbW1vbi90eXBlcy9jYWxlbmRhci1tb2RlLWVudW0nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF5Q2FsZW5kYXJTZXJ2aWNlIH0gZnJvbSAnLi9kYXktY2FsZW5kYXIuc2VydmljZSc7XG5pbXBvcnQgeyBNb21lbnQsIHVuaXRPZlRpbWUgfSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgSURheUNhbGVuZGFyQ29uZmlnLCBJRGF5Q2FsZW5kYXJDb25maWdJbnRlcm5hbCB9IGZyb20gJy4vZGF5LWNhbGVuZGFyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBJRGF5IH0gZnJvbSAnLi9kYXkubW9kZWwnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Db250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDYWxlbmRhclZhbHVlIH0gZnJvbSAnLi4vY29tbW9uL3R5cGVzL2NhbGVuZGFyLXZhbHVlJztcbmltcG9ydCB7IFV0aWxzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9zZXJ2aWNlcy91dGlscy91dGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IElNb250aENhbGVuZGFyQ29uZmlnIH0gZnJvbSAnLi4vbW9udGgtY2FsZW5kYXIvbW9udGgtY2FsZW5kYXItY29uZmlnJztcbmltcG9ydCB7IElNb250aCB9IGZyb20gJy4uL21vbnRoLWNhbGVuZGFyL21vbnRoLm1vZGVsJztcbmltcG9ydCB7IERhdGVWYWxpZGF0b3IgfSBmcm9tICcuLi9jb21tb24vdHlwZXMvdmFsaWRhdG9yLnR5cGUnO1xuaW1wb3J0IHsgSU5hdkV2ZW50IH0gZnJvbSAnLi4vY29tbW9uL21vZGVscy9uYXZpZ2F0aW9uLWV2ZW50Lm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheUNhbGVuZGFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3Ige1xuICAgIHJlYWRvbmx5IGRheUNhbGVuZGFyU2VydmljZTogRGF5Q2FsZW5kYXJTZXJ2aWNlO1xuICAgIHJlYWRvbmx5IHV0aWxzU2VydmljZTogVXRpbHNTZXJ2aWNlO1xuICAgIHJlYWRvbmx5IGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBnZXQgc2VsZWN0ZWQoKTogTW9tZW50W107XG4gICAgc2V0IHNlbGVjdGVkKHNlbGVjdGVkOiBNb21lbnRbXSk7XG4gICAgZ2V0IGN1cnJlbnREYXRlVmlldygpOiBNb21lbnQ7XG4gICAgc2V0IGN1cnJlbnREYXRlVmlldyhjdXJyZW50OiBNb21lbnQpO1xuICAgIGNvbmZpZzogSURheUNhbGVuZGFyQ29uZmlnO1xuICAgIGRpc3BsYXlEYXRlOiBTaW5nbGVDYWxlbmRhclZhbHVlO1xuICAgIG1pbkRhdGU6IE1vbWVudDtcbiAgICBtYXhEYXRlOiBNb21lbnQ7XG4gICAgdGhlbWU6IHN0cmluZztcbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPElEYXk+O1xuICAgIG9uTW9udGhTZWxlY3Q6IEV2ZW50RW1pdHRlcjxJTW9udGg+O1xuICAgIG9uTmF2SGVhZGVyQnRuQ2xpY2s6IEV2ZW50RW1pdHRlcjxFQ2FsZW5kYXJNb2RlPjtcbiAgICBvbkdvVG9DdXJyZW50OiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb25MZWZ0TmF2OiBFdmVudEVtaXR0ZXI8SU5hdkV2ZW50PjtcbiAgICBvblJpZ2h0TmF2OiBFdmVudEVtaXR0ZXI8SU5hdkV2ZW50PjtcbiAgICBDYWxlbmRhck1vZGU6IHR5cGVvZiBFQ2FsZW5kYXJNb2RlO1xuICAgIGlzSW5pdGVkOiBib29sZWFuO1xuICAgIGNvbXBvbmVudENvbmZpZzogSURheUNhbGVuZGFyQ29uZmlnSW50ZXJuYWw7XG4gICAgd2Vla3M6IElEYXlbXVtdO1xuICAgIHdlZWtkYXlzOiBNb21lbnRbXTtcbiAgICBpbnB1dFZhbHVlOiBDYWxlbmRhclZhbHVlO1xuICAgIGlucHV0VmFsdWVUeXBlOiBFQ2FsZW5kYXJWYWx1ZTtcbiAgICB2YWxpZGF0ZUZuOiBEYXRlVmFsaWRhdG9yO1xuICAgIGN1cnJlbnRDYWxlbmRhck1vZGU6IEVDYWxlbmRhck1vZGU7XG4gICAgbW9udGhDYWxlbmRhckNvbmZpZzogSU1vbnRoQ2FsZW5kYXJDb25maWc7XG4gICAgX3Nob3VsZFNob3dDdXJyZW50OiBib29sZWFuO1xuICAgIG5hdkxhYmVsOiBzdHJpbmc7XG4gICAgc2hvd0xlZnROYXY6IGJvb2xlYW47XG4gICAgc2hvd1JpZ2h0TmF2OiBib29sZWFuO1xuICAgIGFwaToge1xuICAgICAgICBtb3ZlQ2FsZW5kYXJzQnk6IGFueTtcbiAgICAgICAgbW92ZUNhbGVuZGFyVG86IGFueTtcbiAgICAgICAgdG9nZ2xlQ2FsZW5kYXJNb2RlOiBhbnk7XG4gICAgfTtcbiAgICBfc2VsZWN0ZWQ6IE1vbWVudFtdO1xuICAgIF9jdXJyZW50RGF0ZVZpZXc6IE1vbWVudDtcbiAgICBjb25zdHJ1Y3RvcihkYXlDYWxlbmRhclNlcnZpY2U6IERheUNhbGVuZGFyU2VydmljZSwgdXRpbHNTZXJ2aWNlOiBVdGlsc1NlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogQ2FsZW5kYXJWYWx1ZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICBvbkNoYW5nZUNhbGxiYWNrKF86IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoZm9ybUNvbnRyb2w6IEZvcm1Db250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IGFueTtcbiAgICBwcm9jZXNzT25DaGFuZ2VDYWxsYmFjayh2YWx1ZTogTW9tZW50W10pOiBDYWxlbmRhclZhbHVlO1xuICAgIGluaXRWYWxpZGF0b3JzKCk6IHZvaWQ7XG4gICAgZGF5Q2xpY2tlZChkYXk6IElEYXkpOiB2b2lkO1xuICAgIGdldERheUJ0blRleHQoZGF5OiBJRGF5KTogc3RyaW5nO1xuICAgIGdldERheUJ0bkNzc0NsYXNzKGRheTogSURheSk6IHtcbiAgICAgICAgW2tsYXNzOiBzdHJpbmddOiBib29sZWFuO1xuICAgIH07XG4gICAgb25MZWZ0TmF2Q2xpY2soKTogdm9pZDtcbiAgICBvblJpZ2h0TmF2Q2xpY2soKTogdm9pZDtcbiAgICBvbk1vbnRoQ2FsZW5kYXJMZWZ0Q2xpY2soY2hhbmdlOiBJTmF2RXZlbnQpOiB2b2lkO1xuICAgIG9uTW9udGhDYWxlbmRhclJpZ2h0Q2xpY2soY2hhbmdlOiBJTmF2RXZlbnQpOiB2b2lkO1xuICAgIG9uTW9udGhDYWxlbmRhclNlY29uZGFyeUxlZnRDbGljayhjaGFuZ2U6IElOYXZFdmVudCk6IHZvaWQ7XG4gICAgb25Nb250aENhbGVuZGFyU2Vjb25kYXJ5UmlnaHRDbGljayhjaGFuZ2U6IElOYXZFdmVudCk6IHZvaWQ7XG4gICAgZ2V0V2Vla2RheU5hbWUod2Vla2RheTogTW9tZW50KTogc3RyaW5nO1xuICAgIHRvZ2dsZUNhbGVuZGFyTW9kZShtb2RlOiBFQ2FsZW5kYXJNb2RlKTogdm9pZDtcbiAgICBtb250aFNlbGVjdGVkKG1vbnRoOiBJTW9udGgpOiB2b2lkO1xuICAgIG1vdmVDYWxlbmRhcnNCeShjdXJyZW50OiBNb21lbnQsIGFtb3VudDogbnVtYmVyLCBncmFudWxhcml0eT86IHVuaXRPZlRpbWUuQmFzZSk6IHZvaWQ7XG4gICAgbW92ZUNhbGVuZGFyVG8odG86IFNpbmdsZUNhbGVuZGFyVmFsdWUpOiB2b2lkO1xuICAgIHNob3VsZFNob3dDdXJyZW50KCk6IGJvb2xlYW47XG4gICAgZ29Ub0N1cnJlbnQoKTogdm9pZDtcbiAgICBoYW5kbGVDb25maWdDaGFuZ2UoY29uZmlnOiBTaW1wbGVDaGFuZ2UpOiB2b2lkO1xufVxuIl19