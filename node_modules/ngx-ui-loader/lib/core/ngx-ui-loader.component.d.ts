import { OnInit, OnChanges, SimpleChanges, OnDestroy, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { DomSanitizer, SafeResourceUrl, SafeStyle } from '@angular/platform-browser';
import { NgxUiLoaderService } from './ngx-ui-loader.service';
import { Subscription } from 'rxjs';
import { NgxUiLoaderConfig } from '../utils/interfaces';
import { DirectionType, PositionType, SpinnerType } from '../utils/types';
import * as ɵngcc0 from '@angular/core';
export declare class NgxUiLoaderComponent implements OnChanges, OnDestroy, OnInit {
    private domSanitizer;
    private changeDetectorRef;
    private ngxService;
    bgsColor: string;
    bgsOpacity: number;
    bgsPosition: PositionType;
    bgsSize: number;
    bgsTemplate: TemplateRef<any>;
    bgsType: SpinnerType;
    fgsColor: string;
    fgsPosition: PositionType;
    fgsSize: number;
    fgsTemplate: TemplateRef<any>;
    fgsType: SpinnerType;
    gap: number;
    loaderId: string;
    logoPosition: PositionType;
    logoSize: number;
    logoUrl: string;
    overlayBorderRadius: string;
    overlayColor: string;
    pbColor: string;
    pbDirection: DirectionType;
    pbThickness: number;
    hasProgressBar: boolean;
    text: string;
    textColor: string;
    textPosition: PositionType;
    fastFadeOut: boolean;
    fgDivs: number[];
    fgSpinnerClass: string;
    bgDivs: number[];
    bgSpinnerClass: string;
    showForeground: boolean;
    showBackground: boolean;
    foregroundClosing: boolean;
    backgroundClosing: boolean;
    trustedLogoUrl: SafeResourceUrl;
    logoTop: SafeStyle;
    spinnerTop: SafeStyle;
    textTop: SafeStyle;
    showForegroundWatcher: Subscription;
    showBackgroundWatcher: Subscription;
    foregroundClosingWatcher: Subscription;
    backgroundClosingWatcher: Subscription;
    defaultConfig: NgxUiLoaderConfig;
    initialized: boolean;
    /**
     * Constructor
     */
    constructor(domSanitizer: DomSanitizer, changeDetectorRef: ChangeDetectorRef, ngxService: NgxUiLoaderService);
    /**
     * On init event
     */
    ngOnInit(): void;
    /**
     * On changes event
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Initialize spinners
     */
    private initializeSpinners;
    /**
     * Determine the positions of spinner, logo and text
     */
    private determinePositions;
    /**
     * On destroy event
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxUiLoaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxUiLoaderComponent, "ngx-ui-loader", never, { "bgsColor": "bgsColor"; "bgsOpacity": "bgsOpacity"; "bgsPosition": "bgsPosition"; "bgsSize": "bgsSize"; "bgsType": "bgsType"; "fgsColor": "fgsColor"; "fgsPosition": "fgsPosition"; "fgsSize": "fgsSize"; "fgsType": "fgsType"; "gap": "gap"; "loaderId": "loaderId"; "logoPosition": "logoPosition"; "logoSize": "logoSize"; "logoUrl": "logoUrl"; "overlayBorderRadius": "overlayBorderRadius"; "overlayColor": "overlayColor"; "pbColor": "pbColor"; "pbDirection": "pbDirection"; "pbThickness": "pbThickness"; "hasProgressBar": "hasProgressBar"; "text": "text"; "textColor": "textColor"; "textPosition": "textPosition"; "bgsTemplate": "bgsTemplate"; "fgsTemplate": "fgsTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXVpLWxvYWRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXVpLWxvYWRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmd4VWlMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtdWktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ3hVaUxvYWRlckNvbmZpZyB9IGZyb20gJy4uL3V0aWxzL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRGlyZWN0aW9uVHlwZSwgUG9zaXRpb25UeXBlLCBTcGlubmVyVHlwZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFVpTG9hZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBkb21TYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIG5neFNlcnZpY2U7XG4gICAgYmdzQ29sb3I6IHN0cmluZztcbiAgICBiZ3NPcGFjaXR5OiBudW1iZXI7XG4gICAgYmdzUG9zaXRpb246IFBvc2l0aW9uVHlwZTtcbiAgICBiZ3NTaXplOiBudW1iZXI7XG4gICAgYmdzVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgYmdzVHlwZTogU3Bpbm5lclR5cGU7XG4gICAgZmdzQ29sb3I6IHN0cmluZztcbiAgICBmZ3NQb3NpdGlvbjogUG9zaXRpb25UeXBlO1xuICAgIGZnc1NpemU6IG51bWJlcjtcbiAgICBmZ3NUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBmZ3NUeXBlOiBTcGlubmVyVHlwZTtcbiAgICBnYXA6IG51bWJlcjtcbiAgICBsb2FkZXJJZDogc3RyaW5nO1xuICAgIGxvZ29Qb3NpdGlvbjogUG9zaXRpb25UeXBlO1xuICAgIGxvZ29TaXplOiBudW1iZXI7XG4gICAgbG9nb1VybDogc3RyaW5nO1xuICAgIG92ZXJsYXlCb3JkZXJSYWRpdXM6IHN0cmluZztcbiAgICBvdmVybGF5Q29sb3I6IHN0cmluZztcbiAgICBwYkNvbG9yOiBzdHJpbmc7XG4gICAgcGJEaXJlY3Rpb246IERpcmVjdGlvblR5cGU7XG4gICAgcGJUaGlja25lc3M6IG51bWJlcjtcbiAgICBoYXNQcm9ncmVzc0JhcjogYm9vbGVhbjtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdGV4dENvbG9yOiBzdHJpbmc7XG4gICAgdGV4dFBvc2l0aW9uOiBQb3NpdGlvblR5cGU7XG4gICAgZmFzdEZhZGVPdXQ6IGJvb2xlYW47XG4gICAgZmdEaXZzOiBudW1iZXJbXTtcbiAgICBmZ1NwaW5uZXJDbGFzczogc3RyaW5nO1xuICAgIGJnRGl2czogbnVtYmVyW107XG4gICAgYmdTcGlubmVyQ2xhc3M6IHN0cmluZztcbiAgICBzaG93Rm9yZWdyb3VuZDogYm9vbGVhbjtcbiAgICBzaG93QmFja2dyb3VuZDogYm9vbGVhbjtcbiAgICBmb3JlZ3JvdW5kQ2xvc2luZzogYm9vbGVhbjtcbiAgICBiYWNrZ3JvdW5kQ2xvc2luZzogYm9vbGVhbjtcbiAgICB0cnVzdGVkTG9nb1VybDogU2FmZVJlc291cmNlVXJsO1xuICAgIGxvZ29Ub3A6IFNhZmVTdHlsZTtcbiAgICBzcGlubmVyVG9wOiBTYWZlU3R5bGU7XG4gICAgdGV4dFRvcDogU2FmZVN0eWxlO1xuICAgIHNob3dGb3JlZ3JvdW5kV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xuICAgIHNob3dCYWNrZ3JvdW5kV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xuICAgIGZvcmVncm91bmRDbG9zaW5nV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xuICAgIGJhY2tncm91bmRDbG9zaW5nV2F0Y2hlcjogU3Vic2NyaXB0aW9uO1xuICAgIGRlZmF1bHRDb25maWc6IE5neFVpTG9hZGVyQ29uZmlnO1xuICAgIGluaXRpYWxpemVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgbmd4U2VydmljZTogTmd4VWlMb2FkZXJTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBPbiBpbml0IGV2ZW50XG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBjaGFuZ2VzIGV2ZW50XG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBzcGlubmVyc1xuICAgICAqL1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZVNwaW5uZXJzO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZSB0aGUgcG9zaXRpb25zIG9mIHNwaW5uZXIsIGxvZ28gYW5kIHRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGRldGVybWluZVBvc2l0aW9ucztcbiAgICAvKipcbiAgICAgKiBPbiBkZXN0cm95IGV2ZW50XG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==